const c = @cImport({
    @cInclude("stdlib.h");
});

pub const Buffer = extern struct {
    data: [*]u8,
    capacity: u64,
    size: u64,
    owned: bool,
};

pub fn buffer_create(capacity: u64) ?*Buffer {
    // Allocate memory for the buffer structure
    const buffer = @as(*Buffer, @ptrCast(c.malloc(@sizeOf(Buffer)))) orelse return null;

    // Allocate memory for the data
    const data = @as([*]u8, @ptrCast(c.malloc(capacity))) orelse {
        c.free(buffer);
        return null;
    };

    // Initialize the buffer
    buffer.data = data;
    buffer.capacity = capacity;
    buffer.size = 0;
    buffer.owned = true;

    return buffer;
}

pub fn buffer_wrap(data: [*]u8, size: u64) ?*Buffer {
    // Allocate memory for the buffer structure
    const buffer = @as(*Buffer, @ptrCast(c.malloc(@sizeOf(Buffer)))) orelse return null;

    // Initialize the buffer with provided data
    buffer.data = data;
    buffer.capacity = size;
    buffer.size = size;
    buffer.owned = false; // We don't own the data, just wrapping it

    return buffer;
}

pub fn buffer_release(buffer: *Buffer) void {
    if (buffer.owned) {
        // Only free the data if we own it
        c.free(buffer.data);
    }

    // Free the buffer structure itself
    c.free(buffer);
}
