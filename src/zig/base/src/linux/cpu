const cpu = @import("../include/cpu");
const std = @import("std");

var gpa = std.heap.GeneralPurposeAllocator(.{}){};
const allocator = gpa.allocator();

pub fn buffer_create(capacity: u64) ?*Buffer {
    // Allocate memory for the buffer struct
    const buffer_ptr = allocator.create(Buffer) catch return null;

    // Allocate memory for the data
    const data = allocator.alloc(u8, capacity) catch {
        allocator.destroy(buffer_ptr);
        return null;
    };

    // Initialize the buffer
    buffer_ptr.* = Buffer{
        .data = data.ptr,
        .capacity = capacity,
        .size = 0,
        .owned = true, // We own this memory and are responsible for freeing it
    };

    return buffer_ptr;
}

pub fn buffer_wrap(data: [*]u8, size: u64) ?*Buffer {
    // Allocate memory for the buffer structure
    const buffer = @as(*Buffer, @ptrCast(c.malloc(@sizeOf(Buffer)))) orelse return null;

    // Initialize the buffer with provided data
    buffer.data = data;
    buffer.capacity = size;
    buffer.size = size;
    buffer.owned = false; // We don't own the data, just wrapping it

    return buffer;
}

pub fn buffer_release(buffer: *Buffer) void {
    if (buffer.owned) {
        // Only free the data if we own it
        c.free(buffer.data);
    }

    // Free the buffer structure itself
    c.free(buffer);
}
