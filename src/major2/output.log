warning: virtual workspace defaulting to `resolver = "1"` despite one or more workspace members being on edition 2024 which implies `resolver = "3"`
note: to keep the current resolver, specify `workspace.resolver = "1"` in the workspace root's manifest
note: to use the edition 2024 resolver, specify `workspace.resolver = "3"` in the workspace root's manifest
note: for more details see https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions
   Compiling major v0.1.0 (C:\work\angelite\src\major)
warning: unused import: `core::fmt`
 --> src\major\src\lib.rs:1:5
  |
1 | use core::fmt;
  |     ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `CString`
 --> src\major\src\gfx\vk\mod.rs:1:16
  |
1 | use std::ffi::{CString, c_void};
  |                ^^^^^^^

warning: unused import: `std::fmt::Debug`
 --> src\major\src\gfx\vk\mod.rs:2:5
  |
2 | use std::fmt::Debug;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `std::mem::ManuallyDrop`
 --> src\major\src\gfx\vk\mod.rs:3:5
  |
3 | use std::mem::ManuallyDrop;
  |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::mem::MaybeUninit`
  --> src\major\src\gfx\vk\mod.rs:43:9
   |
43 |     use std::mem::MaybeUninit;
   |         ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `math`
 --> src\major\src\world\mod.rs:3:26
  |
3 | use crate::{engine, gfx, math};
  |                          ^^^^

warning: unused variable: `origin`
  --> src\major\src\engine\windows\mod.rs:23:26
   |
23 |     fn set_origin(&self, origin: crate::math::Vector<i64, 3>) {
   |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_origin`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `position`
  --> src\major\src\engine\windows\mod.rs:27:24
   |
27 |     fn cell_set(&self, position: crate::math::Vector<i64, 3>, tile: crate::tile::Type) {
   |                        ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `tile`
  --> src\major\src\engine\windows\mod.rs:27:63
   |
27 |     fn cell_set(&self, position: crate::math::Vector<i64, 3>, tile: crate::tile::Type) {
   |                                                               ^^^^ help: if this is intentional, prefix it with an underscore: `_tile`

warning: unused variable: `ty`
  --> src\major\src\engine\windows\mod.rs:35:28
   |
35 |     fn actor_create(&self, ty: super::Actor) -> *mut super::Actor {
   |                            ^^ help: if this is intentional, prefix it with an underscore: `_ty`

warning: unused variable: `actor`
  --> src\major\src\engine\windows\mod.rs:39:26
   |
39 |     fn actor_move(&self, actor: *mut super::Actor, position: crate::math::Vector<f32, 3>) {
   |                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_actor`

warning: unused variable: `position`
  --> src\major\src\engine\windows\mod.rs:39:52
   |
39 |     fn actor_move(&self, actor: *mut super::Actor, position: crate::math::Vector<f32, 3>) {
   |                                                    ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `actor`
  --> src\major\src\engine\windows\mod.rs:43:28
   |
43 |     fn actor_rotate(&self, actor: *mut super::Actor, rotation: crate::math::Quaternion<f32>) {
   |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_actor`

warning: unused variable: `rotation`
  --> src\major\src\engine\windows\mod.rs:43:54
   |
43 |     fn actor_rotate(&self, actor: *mut super::Actor, rotation: crate::math::Quaternion<f32>) {
   |                                                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_rotation`

warning: unused variable: `actor`
  --> src\major\src\engine\windows\mod.rs:47:30
   |
47 |     fn actor_position(&self, actor: *mut super::Actor) -> crate::math::Vector<f32, 3> {
   |                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_actor`

warning: unused variable: `actor`
  --> src\major\src\engine\windows\mod.rs:51:30
   |
51 |     fn actor_rotation(&self, actor: *mut super::Actor) -> crate::math::Quaternion<f32> {
   |                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_actor`

warning: unused variable: `bind`
  --> src\major\src\engine\windows\mod.rs:55:34
   |
55 |     fn input_binding_data(&self, bind: super::Binding) -> super::Data {
   |                                  ^^^^ help: if this is intentional, prefix it with an underscore: `_bind`

warning: unused variable: `button`
  --> src\major\src\engine\windows\mod.rs:59:38
   |
59 |     fn input_binding_activate(&self, button: super::Button, activate: bool) {
   |                                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_button`

warning: unused variable: `activate`
  --> src\major\src\engine\windows\mod.rs:59:61
   |
59 |     fn input_binding_activate(&self, button: super::Button, activate: bool) {
   |                                                             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_activate`

warning: unused variable: `axis`
  --> src\major\src\engine\windows\mod.rs:63:34
   |
63 |     fn input_binding_move(&self, axis: super::Axis, x: f32, y: f32) {
   |                                  ^^^^ help: if this is intentional, prefix it with an underscore: `_axis`

warning: unused variable: `x`
  --> src\major\src\engine\windows\mod.rs:63:53
   |
63 |     fn input_binding_move(&self, axis: super::Axis, x: f32, y: f32) {
   |                                                     ^ help: if this is intentional, prefix it with an underscore: `_x`

warning: unused variable: `y`
  --> src\major\src\engine\windows\mod.rs:63:61
   |
63 |     fn input_binding_move(&self, axis: super::Axis, x: f32, y: f32) {
   |                                                             ^ help: if this is intentional, prefix it with an underscore: `_y`

warning: unused variable: `name`
  --> src\major\src\engine\windows\mod.rs:67:27
   |
67 |     fn debug_value(&self, name: Box<dyn core::fmt::Display>) {
   |                           ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

warning: unused variable: `mesh`
   --> src\major\src\gfx\vk\mod.rs:310:35
    |
310 |     fn mesh_update_indices(&self, mesh: *const super::Mesh, indices: &[super::Index]) {
    |                                   ^^^^ help: if this is intentional, prefix it with an underscore: `_mesh`

warning: unused variable: `indices`
   --> src\major\src\gfx\vk\mod.rs:310:61
    |
310 |     fn mesh_update_indices(&self, mesh: *const super::Mesh, indices: &[super::Index]) {
    |                                                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_indices`

warning: unused variable: `batch`
   --> src\major\src\gfx\vk\mod.rs:342:32
    |
342 |     fn batch_queue_draw(&self, batch: *const super::Batch) {
    |                                ^^^^^ help: if this is intentional, prefix it with an underscore: `_batch`

warning: fields `batches` and `main_camera` are never read
  --> src\major\src\gfx\vk\mod.rs:35:5
   |
32 | pub struct Vulkan {
   |            ------ fields in this struct
...
35 |     batches: Vec<Batch>,
   |     ^^^^^^^
36 |     cameras: Vec<Camera>,
37 |     main_camera: Option<usize>,
   |     ^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: fields `vector` and `scalar` are never read
  --> src\major\src\math\mod.rs:12:5
   |
11 | pub struct Quaternion<T> {
   |            ---------- fields in this struct
12 |     vector: Vector<T, 3>,
   |     ^^^^^^
13 |     scalar: T,
   |     ^^^^^^

warning: function `surface_title` is never used
  --> src\major\src\surface\desktop.rs:19:8
   |
19 |     fn surface_title(surface: *mut c_void, title: *const c_char);
   |        ^^^^^^^^^^^^^

warning: function `surface_visibility` is never used
  --> src\major\src\surface\desktop.rs:20:8
   |
20 |     fn surface_visibility(surface: *mut c_void, visible: bool);
   |        ^^^^^^^^^^^^^^^^^^

warning: function `surface_visible` is never used
  --> src\major\src\surface\desktop.rs:23:8
   |
23 |     fn surface_visible(surface: *mut c_void) -> bool;
   |        ^^^^^^^^^^^^^^^

warning: function `surface_on_resize` is never used
  --> src\major\src\surface\desktop.rs:26:8
   |
26 |     fn surface_on_resize(surface: *mut c_void, callback: extern "C" fn(*mut c_void, c_int, c_int));
   |        ^^^^^^^^^^^^^^^^^

warning: function `surface_on_focus` is never used
  --> src\major\src\surface\desktop.rs:27:8
   |
27 |     fn surface_on_focus(surface: *mut c_void, callback: extern "C" fn(*mut c_void, bool));
   |        ^^^^^^^^^^^^^^^^

warning: function `surface_on_close` is never used
  --> src\major\src\surface\desktop.rs:28:8
   |
28 |     fn surface_on_close(surface: *mut c_void, callback: extern "C" fn(*mut c_void) -> bool);
   |        ^^^^^^^^^^^^^^^^

warning: field `ty` is never read
 --> src\major\src\tile.rs:2:16
  |
1 | pub struct Tile {
  |            ---- field in this struct
2 |     pub(crate) ty: Type,
  |                ^^

warning: field `actor` is never read
  --> src\major\src\world\mod.rs:28:5
   |
27 | pub struct Entity {
   |            ------ field in this struct
28 |     actor: EntityId,
   |     ^^^^^

warning: fields `origin`, `entities`, and `cameras` are never read
  --> src\major\src\world\mod.rs:33:5
   |
32 | pub struct World {
   |            ----- fields in this struct
33 |     origin: crate::math::Vector<i64, 3>,
   |     ^^^^^^
34 |     entities: HashMap<EntityId, Entity>,
   |     ^^^^^^^^
35 |     cameras: Vec<(ObserverId, EntityId)>,
   |     ^^^^^^^

warning: `major` (lib) generated 37 warnings (run `cargo fix --lib -p major` to apply 6 suggestions)
   Compiling biolab v0.1.0 (C:\work\angelite\src\biolab)
warning: unused imports: `alloc::alloc`, `collections::HashMap`, `ops::Mul`, `random::random`, and `thread`
 --> src\biolab\src\main.rs:3:5
  |
3 |     alloc::alloc,
  |     ^^^^^^^^^^^^
4 |     collections::HashMap,
  |     ^^^^^^^^^^^^^^^^^^^^
5 |     ops::Mul,
  |     ^^^^^^^^
6 |     ptr,
7 |     random::random,
  |     ^^^^^^^^^^^^^^
8 |     thread,
  |     ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Actor` and `Binding`
  --> src\biolab\src\main.rs:14:14
   |
14 |     engine::{Actor, Binding},
   |              ^^^^^  ^^^^^^^

warning: unused imports: `Circle`, `P2`, `QuadTree`, and `self`
  --> src\biolab\src\main.rs:19:5
   |
19 |     P2, Point, QuadTree,
   |     ^^         ^^^^^^^^
20 |     shapes::{self, Circle},
   |              ^^^^  ^^^^^^

warning: variable does not need to be mutable
  --> src\biolab\src\main.rs:70:9
   |
70 |     let mut mesh = gfx.mesh_create();
   |         ----^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
  --> src\biolab\src\main.rs:82:9
   |
82 |     let mut batch = gfx.batch_create();
   |         ----^^^^^
   |         |
   |         help: remove this `mut`

warning: fields `actor`, `action`, `action_cooldown`, `action_last`, and `position` are never read
  --> src\biolab\src\main.rs:58:5
   |
57 | pub struct Entity {
   |            ------ fields in this struct
58 |     actor: *mut major::engine::Actor,
   |     ^^^^^
59 |     action: Option<Action>,
   |     ^^^^^^
60 |     action_cooldown: Duration,
   |     ^^^^^^^^^^^^^^^
61 |     action_last: Instant,
   |     ^^^^^^^^^^^
62 |     position: glam::Vec2,
   |     ^^^^^^^^
   |
   = note: `Entity` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: `biolab` (bin "biolab") generated 6 warnings (run `cargo fix --bin "biolab"` to apply 5 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 8.95s
     Running `target\debug\biolab.exe`
Initializing Vulkan renderer...
Internal Renderer.init called with surface_raw: *const anyopaque@5d127c
Loading vulkan base dispatch...
Vulkan base dispatch loaded successfully
Creating vulkan instance...
Vulkan instance created successfully
Loading instance dispatch...
Loading instance function: vkDestroyInstance
Loading instance function: vkEnumeratePhysicalDevices
Loading instance function: vkGetDeviceProcAddr
Loading instance function: vkGetPhysicalDeviceProperties
Loading instance function: vkGetPhysicalDeviceQueueFamilyProperties
Loading instance function: vkGetPhysicalDeviceMemoryProperties
Loading instance function: vkGetPhysicalDeviceFeatures
Loading instance function: vkGetPhysicalDeviceFormatProperties
Loading instance function: vkGetPhysicalDeviceImageFormatProperties
Loading instance function: vkCreateDevice
Loading instance function: vkEnumerateDeviceLayerProperties
Loading instance function: vkEnumerateDeviceExtensionProperties
Loading instance function: vkGetPhysicalDeviceSparseImageFormatProperties
Loading instance function: vkCreateAndroidSurfaceKHR
Loading instance function: vkGetPhysicalDeviceDisplayPropertiesKHR
Loading instance function: vkGetPhysicalDeviceDisplayPlanePropertiesKHR
Loading instance function: vkGetDisplayPlaneSupportedDisplaysKHR
Loading instance function: vkGetDisplayModePropertiesKHR
Loading instance function: vkCreateDisplayModeKHR
Loading instance function: vkGetDisplayPlaneCapabilitiesKHR
Loading instance function: vkCreateDisplayPlaneSurfaceKHR
Loading instance function: vkDestroySurfaceKHR
Loading instance function: vkGetPhysicalDeviceSurfaceSupportKHR
Loading instance function: vkGetPhysicalDeviceSurfaceCapabilitiesKHR
Loading instance function: vkGetPhysicalDeviceSurfaceFormatsKHR
Loading instance function: vkGetPhysicalDeviceSurfacePresentModesKHR
Loading instance function: vkCreateViSurfaceNN
Loading instance function: vkCreateWaylandSurfaceKHR
Loading instance function: vkGetPhysicalDeviceWaylandPresentationSupportKHR
Loading instance function: vkCreateWin32SurfaceKHR
Loading instance function: vkGetPhysicalDeviceWin32PresentationSupportKHR
Loading instance function: vkCreateXlibSurfaceKHR
Loading instance function: vkGetPhysicalDeviceXlibPresentationSupportKHR
Loading instance function: vkCreateXcbSurfaceKHR
Loading instance function: vkGetPhysicalDeviceXcbPresentationSupportKHR
Loading instance function: vkCreateDirectFBSurfaceEXT
Loading instance function: vkGetPhysicalDeviceDirectFBPresentationSupportEXT
Loading instance function: vkCreateImagePipeSurfaceFUCHSIA
Loading instance function: vkCreateStreamDescriptorSurfaceGGP
Loading instance function: vkCreateScreenSurfaceQNX
Loading instance function: vkGetPhysicalDeviceScreenPresentationSupportQNX
Loading instance function: vkCreateDebugReportCallbackEXT
Loading instance function: vkDestroyDebugReportCallbackEXT
Loading instance function: vkDebugReportMessageEXT
Loading instance function: vkGetPhysicalDeviceExternalImageFormatPropertiesNV
Loading instance function: vkGetPhysicalDeviceFeatures2
Loading instance function: vkGetPhysicalDeviceFeatures2KHR
Loading instance function: vkGetPhysicalDeviceProperties2
Loading instance function: vkGetPhysicalDeviceProperties2KHR
Loading instance function: vkGetPhysicalDeviceFormatProperties2
Loading instance function: vkGetPhysicalDeviceFormatProperties2KHR
Loading instance function: vkGetPhysicalDeviceImageFormatProperties2
Loading instance function: vkGetPhysicalDeviceImageFormatProperties2KHR
Loading instance function: vkGetPhysicalDeviceQueueFamilyProperties2
Loading instance function: vkGetPhysicalDeviceQueueFamilyProperties2KHR
Loading instance function: vkGetPhysicalDeviceMemoryProperties2
Loading instance function: vkGetPhysicalDeviceMemoryProperties2KHR
Loading instance function: vkGetPhysicalDeviceSparseImageFormatProperties2
Loading instance function: vkGetPhysicalDeviceSparseImageFormatProperties2KHR
Loading instance function: vkGetPhysicalDeviceExternalBufferProperties
Loading instance function: vkGetPhysicalDeviceExternalBufferPropertiesKHR
Loading instance function: vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV
Loading instance function: vkGetPhysicalDeviceSciBufAttributesNV
Loading instance function: vkGetPhysicalDeviceExternalSemaphoreProperties
Loading instance function: vkGetPhysicalDeviceExternalSemaphorePropertiesKHR
Loading instance function: vkGetPhysicalDeviceExternalFenceProperties
Loading instance function: vkGetPhysicalDeviceExternalFencePropertiesKHR
Loading instance function: vkGetPhysicalDeviceSciSyncAttributesNV
Loading instance function: vkReleaseDisplayEXT
Loading instance function: vkAcquireXlibDisplayEXT
Loading instance function: vkGetRandROutputDisplayEXT
Loading instance function: vkAcquireWinrtDisplayNV
Loading instance function: vkGetWinrtDisplayNV
Loading instance function: vkGetPhysicalDeviceSurfaceCapabilities2EXT
Loading instance function: vkEnumeratePhysicalDeviceGroups
Loading instance function: vkEnumeratePhysicalDeviceGroupsKHR
Loading instance function: vkGetPhysicalDevicePresentRectanglesKHR
Loading instance function: vkCreateIOSSurfaceMVK
Loading instance function: vkCreateMacOSSurfaceMVK
Loading instance function: vkCreateMetalSurfaceEXT
Loading instance function: vkGetPhysicalDeviceMultisamplePropertiesEXT
Loading instance function: vkGetPhysicalDeviceSurfaceCapabilities2KHR
Loading instance function: vkGetPhysicalDeviceSurfaceFormats2KHR
Loading instance function: vkGetPhysicalDeviceDisplayProperties2KHR
Loading instance function: vkGetPhysicalDeviceDisplayPlaneProperties2KHR
Loading instance function: vkGetDisplayModeProperties2KHR
Loading instance function: vkGetDisplayPlaneCapabilities2KHR
Loading instance function: vkGetPhysicalDeviceCalibrateableTimeDomainsEXT
Loading instance function: vkCreateDebugUtilsMessengerEXT
Loading instance function: vkDestroyDebugUtilsMessengerEXT
Loading instance function: vkSubmitDebugUtilsMessageEXT
Loading instance function: vkGetPhysicalDeviceCooperativeMatrixPropertiesNV
Loading instance function: vkGetPhysicalDeviceSurfacePresentModes2EXT
Loading instance function: vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR
Loading instance function: vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR
Loading instance function: vkCreateHeadlessSurfaceEXT
Loading instance function: vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV
Loading instance function: vkGetPhysicalDeviceToolProperties
Loading instance function: vkGetPhysicalDeviceToolPropertiesEXT
Loading instance function: vkGetPhysicalDeviceRefreshableObjectTypesKHR
Loading instance function: vkGetPhysicalDeviceFragmentShadingRatesKHR
Loading instance function: vkGetPhysicalDeviceVideoCapabilitiesKHR
Loading instance function: vkGetPhysicalDeviceVideoFormatPropertiesKHR
Loading instance function: vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR
Loading instance function: vkAcquireDrmDisplayEXT
Loading instance function: vkGetDrmDisplayEXT
Loading instance function: vkGetPhysicalDeviceOpticalFlowImageFormatsNV
Loading instance function: vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR
Instance dispatch loaded successfully
Initializing Vulkan renderer...
Initializing Vulkan renderer...
Enumerating physical devices...
Found 1 physical devices
Initializing Vulkan renderer...
Initializing Vulkan renderer...
Initializing Vulkan renderer...
Initializing Vulkan renderer512...
Initializing Vulkan renderer...
Loading device function: vkDestroyDevice
Loading device function: vkGetDeviceQueue
Loading device function: vkQueueSubmit
Loading device function: vkQueueWaitIdle
Loading device function: vkDeviceWaitIdle
Loading device function: vkAllocateMemory
Loading device function: vkFreeMemory
Loading device function: vkMapMemory
Loading device function: vkUnmapMemory
Loading device function: vkFlushMappedMemoryRanges
Loading device function: vkInvalidateMappedMemoryRanges
Loading device function: vkGetDeviceMemoryCommitment
Loading device function: vkGetBufferMemoryRequirements
Loading device function: vkBindBufferMemory
Loading device function: vkGetImageMemoryRequirements
Loading device function: vkBindImageMemory
Loading device function: vkGetImageSparseMemoryRequirements
Loading device function: vkQueueBindSparse
Loading device function: vkCreateFence
Loading device function: vkDestroyFence
Loading device function: vkResetFences
Loading device function: vkGetFenceStatus
Loading device function: vkWaitForFences
Loading device function: vkCreateSemaphore
Loading device function: vkDestroySemaphore
Loading device function: vkCreateEvent
Loading device function: vkDestroyEvent
Loading device function: vkGetEventStatus
Loading device function: vkSetEvent
Loading device function: vkResetEvent
Loading device function: vkCreateQueryPool
Loading device function: vkDestroyQueryPool
Loading device function: vkGetQueryPoolResults
Loading device function: vkResetQueryPool
Loading device function: vkResetQueryPoolEXT
Loading device function: vkCreateBuffer
Loading device function: vkDestroyBuffer
Loading device function: vkCreateBufferView
Loading device function: vkDestroyBufferView
Loading device function: vkCreateImage
Loading device function: vkDestroyImage
Loading device function: vkGetImageSubresourceLayout
Loading device function: vkCreateImageView
Loading device function: vkDestroyImageView
Loading device function: vkCreateShaderModule
Loading device function: vkDestroyShaderModule
Loading device function: vkCreatePipelineCache
Loading device function: vkDestroyPipelineCache
Loading device function: vkGetPipelineCacheData
Loading device function: vkMergePipelineCaches
Loading device function: vkCreateGraphicsPipelines
Loading device function: vkCreateComputePipelines
Loading device function: vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI
Loading device function: vkDestroyPipeline
Loading device function: vkCreatePipelineLayout
Loading device function: vkDestroyPipelineLayout
Loading device function: vkCreateSampler
Loading device function: vkDestroySampler
Loading device function: vkCreateDescriptorSetLayout
Loading device function: vkDestroyDescriptorSetLayout
Loading device function: vkCreateDescriptorPool
Loading device function: vkDestroyDescriptorPool
Loading device function: vkResetDescriptorPool
Loading device function: vkAllocateDescriptorSets
Loading device function: vkFreeDescriptorSets
Loading device function: vkUpdateDescriptorSets
Loading device function: vkCreateFramebuffer
Loading device function: vkDestroyFramebuffer
Loading device function: vkCreateRenderPass
Loading device function: vkDestroyRenderPass
Loading device function: vkGetRenderAreaGranularity
Loading device function: vkGetRenderingAreaGranularityKHR
Loading device function: vkCreateCommandPool
Loading device function: vkDestroyCommandPool
Loading device function: vkResetCommandPool
Loading device function: vkAllocateCommandBuffers
Loading device function: vkFreeCommandBuffers
Loading device function: vkBeginCommandBuffer
Loading device function: vkEndCommandBuffer
Loading device function: vkResetCommandBuffer
Loading device function: vkCmdBindPipeline
Loading device function: vkCmdSetAttachmentFeedbackLoopEnableEXT
Loading device function: vkCmdSetViewport
Loading device function: vkCmdSetScissor
Loading device function: vkCmdSetLineWidth
Loading device function: vkCmdSetDepthBias
Loading device function: vkCmdSetBlendConstants
Loading device function: vkCmdSetDepthBounds
Loading device function: vkCmdSetStencilCompareMask
Loading device function: vkCmdSetStencilWriteMask
Loading device function: vkCmdSetStencilReference
Loading device function: vkCmdBindDescriptorSets
Loading device function: vkCmdBindIndexBuffer
Loading device function: vkCmdBindVertexBuffers
Loading device function: vkCmdDraw
Loading device function: vkCmdDrawIndexed
Loading device function: vkCmdDrawMultiEXT
Loading device function: vkCmdDrawMultiIndexedEXT
Loading device function: vkCmdDrawIndirect
Loading device function: vkCmdDrawIndexedIndirect
Loading device function: vkCmdDispatch
Loading device function: vkCmdDispatchIndirect
Loading device function: vkCmdSubpassShadingHUAWEI
Loading device function: vkCmdDrawClusterHUAWEI
Loading device function: vkCmdDrawClusterIndirectHUAWEI
Loading device function: vkCmdUpdatePipelineIndirectBufferNV
Loading device function: vkCmdCopyBuffer
Loading device function: vkCmdCopyImage
Loading device function: vkCmdBlitImage
Loading device function: vkCmdCopyBufferToImage
Loading device function: vkCmdCopyImageToBuffer
Loading device function: vkCmdCopyMemoryIndirectNV
Loading device function: vkCmdCopyMemoryToImageIndirectNV
Loading device function: vkCmdUpdateBuffer
Loading device function: vkCmdFillBuffer
Loading device function: vkCmdClearColorImage
Loading device function: vkCmdClearDepthStencilImage
Loading device function: vkCmdClearAttachments
Loading device function: vkCmdResolveImage
Loading device function: vkCmdSetEvent
Loading device function: vkCmdResetEvent
Loading device function: vkCmdWaitEvents
Loading device function: vkCmdPipelineBarrier
Loading device function: vkCmdBeginQuery
Loading device function: vkCmdEndQuery
Loading device function: vkCmdBeginConditionalRenderingEXT
Loading device function: vkCmdEndConditionalRenderingEXT
Loading device function: vkCmdResetQueryPool
Loading device function: vkCmdWriteTimestamp
Loading device function: vkCmdCopyQueryPoolResults
Loading device function: vkCmdPushConstants
Loading device function: vkCmdBeginRenderPass
Loading device function: vkCmdNextSubpass
Loading device function: vkCmdEndRenderPass
Loading device function: vkCmdExecuteCommands
Loading device function: vkCreateSharedSwapchainsKHR
Loading device function: vkCreateSwapchainKHR
Loading device function: vkDestroySwapchainKHR
Loading device function: vkGetSwapchainImagesKHR
Loading device function: vkAcquireNextImageKHR
Loading device function: vkQueuePresentKHR
Loading device function: vkDebugMarkerSetObjectNameEXT
Loading device function: vkDebugMarkerSetObjectTagEXT
Loading device function: vkCmdDebugMarkerBeginEXT
Loading device function: vkCmdDebugMarkerEndEXT
Loading device function: vkCmdDebugMarkerInsertEXT
Loading device function: vkGetMemoryWin32HandleNV
Loading device function: vkCmdExecuteGeneratedCommandsNV
Loading device function: vkCmdPreprocessGeneratedCommandsNV
Loading device function: vkCmdBindPipelineShaderGroupNV
Loading device function: vkGetGeneratedCommandsMemoryRequirementsNV
Loading device function: vkCreateIndirectCommandsLayoutNV
Loading device function: vkDestroyIndirectCommandsLayoutNV
Loading device function: vkCmdPushDescriptorSetKHR
Loading device function: vkTrimCommandPool
Loading device function: vkTrimCommandPoolKHR
Loading device function: vkGetMemoryWin32HandleKHR
Loading device function: vkGetMemoryWin32HandlePropertiesKHR
Loading device function: vkGetMemoryFdKHR
Loading device function: vkGetMemoryFdPropertiesKHR
Loading device function: vkGetMemoryZirconHandleFUCHSIA
Loading device function: vkGetMemoryZirconHandlePropertiesFUCHSIA
Loading device function: vkGetMemoryRemoteAddressNV
Loading device function: vkGetMemorySciBufNV
Loading device function: vkGetSemaphoreWin32HandleKHR
Loading device function: vkImportSemaphoreWin32HandleKHR
Loading device function: vkGetSemaphoreFdKHR
Loading device function: vkImportSemaphoreFdKHR
Loading device function: vkGetSemaphoreZirconHandleFUCHSIA
Loading device function: vkImportSemaphoreZirconHandleFUCHSIA
Loading device function: vkGetFenceWin32HandleKHR
Loading device function: vkImportFenceWin32HandleKHR
Loading device function: vkGetFenceFdKHR
Loading device function: vkImportFenceFdKHR
Loading device function: vkGetFenceSciSyncFenceNV
Loading device function: vkGetFenceSciSyncObjNV
Loading device function: vkImportFenceSciSyncFenceNV
Loading device function: vkImportFenceSciSyncObjNV
Loading device function: vkGetSemaphoreSciSyncObjNV
Loading device function: vkImportSemaphoreSciSyncObjNV
Loading device function: vkCreateSemaphoreSciSyncPoolNV
Loading device function: vkDestroySemaphoreSciSyncPoolNV
Loading device function: vkDisplayPowerControlEXT
Loading device function: vkRegisterDeviceEventEXT
Loading device function: vkRegisterDisplayEventEXT
Loading device function: vkGetSwapchainCounterEXT
Loading device function: vkGetDeviceGroupPeerMemoryFeatures
Loading device function: vkGetDeviceGroupPeerMemoryFeaturesKHR
Loading device function: vkBindBufferMemory2
Loading device function: vkBindBufferMemory2KHR
Loading device function: vkBindImageMemory2
Loading device function: vkBindImageMemory2KHR
Loading device function: vkCmdSetDeviceMask
Loading device function: vkCmdSetDeviceMaskKHR
Loading device function: vkGetDeviceGroupPresentCapabilitiesKHR
Loading device function: vkGetDeviceGroupSurfacePresentModesKHR
Loading device function: vkAcquireNextImage2KHR
Loading device function: vkCmdDispatchBase
Loading device function: vkCmdDispatchBaseKHR
Loading device function: vkCreateDescriptorUpdateTemplate
Loading device function: vkCreateDescriptorUpdateTemplateKHR
Loading device function: vkDestroyDescriptorUpdateTemplate
Loading device function: vkDestroyDescriptorUpdateTemplateKHR
Loading device function: vkUpdateDescriptorSetWithTemplate
Loading device function: vkUpdateDescriptorSetWithTemplateKHR
Loading device function: vkCmdPushDescriptorSetWithTemplateKHR
Loading device function: vkSetHdrMetadataEXT
Loading device function: vkGetSwapchainStatusKHR
Loading device function: vkGetRefreshCycleDurationGOOGLE
Loading device function: vkGetPastPresentationTimingGOOGLE
Loading device function: vkCmdSetViewportWScalingNV
Loading device function: vkCmdSetDiscardRectangleEXT
Loading device function: vkCmdSetDiscardRectangleEnableEXT
Loading device function: vkCmdSetDiscardRectangleModeEXT
Loading device function: vkCmdSetSampleLocationsEXT
Loading device function: vkGetBufferMemoryRequirements2
Loading device function: vkGetBufferMemoryRequirements2KHR
Loading device function: vkGetImageMemoryRequirements2
Loading device function: vkGetImageMemoryRequirements2KHR
Loading device function: vkGetImageSparseMemoryRequirements2
Loading device function: vkGetImageSparseMemoryRequirements2KHR
Loading device function: vkGetDeviceBufferMemoryRequirements
Loading device function: vkGetDeviceBufferMemoryRequirementsKHR
Loading device function: vkGetDeviceImageMemoryRequirements
Loading device function: vkGetDeviceImageMemoryRequirementsKHR
Loading device function: vkGetDeviceImageSparseMemoryRequirements
Loading device function: vkGetDeviceImageSparseMemoryRequirementsKHR
Loading device function: vkCreateSamplerYcbcrConversion
Loading device function: vkCreateSamplerYcbcrConversionKHR
Loading device function: vkDestroySamplerYcbcrConversion
Loading device function: vkDestroySamplerYcbcrConversionKHR
Loading device function: vkGetDeviceQueue2
Loading device function: vkCreateValidationCacheEXT
Loading device function: vkDestroyValidationCacheEXT
Loading device function: vkGetValidationCacheDataEXT
Loading device function: vkMergeValidationCachesEXT
Loading device function: vkGetDescriptorSetLayoutSupport
Loading device function: vkGetDescriptorSetLayoutSupportKHR
Loading device function: vkGetSwapchainGrallocUsageANDROID
Loading device function: vkGetSwapchainGrallocUsage2ANDROID
Loading device function: vkAcquireImageANDROID
Loading device function: vkQueueSignalReleaseImageANDROID
Loading device function: vkGetShaderInfoAMD
Loading device function: vkSetLocalDimmingAMD
Loading device function: vkGetCalibratedTimestampsEXT
Loading device function: vkSetDebugUtilsObjectNameEXT
Loading device function: vkSetDebugUtilsObjectTagEXT
Loading device function: vkQueueBeginDebugUtilsLabelEXT
Loading device function: vkQueueEndDebugUtilsLabelEXT
Loading device function: vkQueueInsertDebugUtilsLabelEXT
Loading device function: vkCmdBeginDebugUtilsLabelEXT
Loading device function: vkCmdEndDebugUtilsLabelEXT
Loading device function: vkCmdInsertDebugUtilsLabelEXT
Loading device function: vkGetMemoryHostPointerPropertiesEXT
Loading device function: vkCmdWriteBufferMarkerAMD
Loading device function: vkCreateRenderPass2
Loading device function: vkCreateRenderPass2KHR
Loading device function: vkCmdBeginRenderPass2
Loading device function: vkCmdBeginRenderPass2KHR
Loading device function: vkCmdNextSubpass2
Loading device function: vkCmdNextSubpass2KHR
Loading device function: vkCmdEndRenderPass2
Loading device function: vkCmdEndRenderPass2KHR
Loading device function: vkGetSemaphoreCounterValue
Loading device function: vkGetSemaphoreCounterValueKHR
Loading device function: vkWaitSemaphores
Loading device function: vkWaitSemaphoresKHR
Loading device function: vkSignalSemaphore
Loading device function: vkSignalSemaphoreKHR
Loading device function: vkGetAndroidHardwareBufferPropertiesANDROID
Loading device function: vkGetMemoryAndroidHardwareBufferANDROID
Loading device function: vkCmdDrawIndirectCount
Loading device function: vkCmdDrawIndirectCountKHR
Loading device function: vkCmdDrawIndirectCountAMD
Loading device function: vkCmdDrawIndexedIndirectCount
Loading device function: vkCmdDrawIndexedIndirectCountKHR
Loading device function: vkCmdDrawIndexedIndirectCountAMD
Loading device function: vkCmdSetCheckpointNV
Loading device function: vkGetQueueCheckpointDataNV
Loading device function: vkCmdBindTransformFeedbackBuffersEXT
Loading device function: vkCmdBeginTransformFeedbackEXT
Loading device function: vkCmdEndTransformFeedbackEXT
Loading device function: vkCmdBeginQueryIndexedEXT
Loading device function: vkCmdEndQueryIndexedEXT
Loading device function: vkCmdDrawIndirectByteCountEXT
Loading device function: vkCmdSetExclusiveScissorNV
Loading device function: vkCmdSetExclusiveScissorEnableNV
Loading device function: vkCmdBindShadingRateImageNV
Loading device function: vkCmdSetViewportShadingRatePaletteNV
Loading device function: vkCmdSetCoarseSampleOrderNV
Loading device function: vkCmdDrawMeshTasksNV
Loading device function: vkCmdDrawMeshTasksIndirectNV
Loading device function: vkCmdDrawMeshTasksIndirectCountNV
Loading device function: vkCmdDrawMeshTasksEXT
Loading device function: vkCmdDrawMeshTasksIndirectEXT
Loading device function: vkCmdDrawMeshTasksIndirectCountEXT
Loading device function: vkCompileDeferredNV
Loading device function: vkCreateAccelerationStructureNV
Loading device function: vkCmdBindInvocationMaskHUAWEI
Loading device function: vkDestroyAccelerationStructureKHR
Loading device function: vkDestroyAccelerationStructureNV
Loading device function: vkGetAccelerationStructureMemoryRequirementsNV
Loading device function: vkBindAccelerationStructureMemoryNV
Loading device function: vkCmdCopyAccelerationStructureNV
Loading device function: vkCmdCopyAccelerationStructureKHR
Loading device function: vkCopyAccelerationStructureKHR
Loading device function: vkCmdCopyAccelerationStructureToMemoryKHR
Loading device function: vkCopyAccelerationStructureToMemoryKHR
Loading device function: vkCmdCopyMemoryToAccelerationStructureKHR
Loading device function: vkCopyMemoryToAccelerationStructureKHR
Loading device function: vkCmdWriteAccelerationStructuresPropertiesKHR
Loading device function: vkCmdWriteAccelerationStructuresPropertiesNV
Loading device function: vkCmdBuildAccelerationStructureNV
Loading device function: vkWriteAccelerationStructuresPropertiesKHR
Loading device function: vkCmdTraceRaysKHR
Loading device function: vkCmdTraceRaysNV
Loading device function: vkGetRayTracingShaderGroupHandlesKHR
Loading device function: vkGetRayTracingShaderGroupHandlesNV
Loading device function: vkGetRayTracingCaptureReplayShaderGroupHandlesKHR
Loading device function: vkGetAccelerationStructureHandleNV
Loading device function: vkCreateRayTracingPipelinesNV
Loading device function: vkCreateRayTracingPipelinesKHR
Loading device function: vkCmdTraceRaysIndirectKHR
Loading device function: vkCmdTraceRaysIndirect2KHR
Loading device function: vkGetDeviceAccelerationStructureCompatibilityKHR
Loading device function: vkGetRayTracingShaderGroupStackSizeKHR
Loading device function: vkCmdSetRayTracingPipelineStackSizeKHR
Loading device function: vkGetImageViewHandleNVX
Loading device function: vkGetImageViewAddressNVX
Loading device function: vkGetDeviceGroupSurfacePresentModes2EXT
Loading device function: vkAcquireFullScreenExclusiveModeEXT
Loading device function: vkReleaseFullScreenExclusiveModeEXT
Loading device function: vkAcquireProfilingLockKHR
Loading device function: vkReleaseProfilingLockKHR
Loading device function: vkGetImageDrmFormatModifierPropertiesEXT
Loading device function: vkGetBufferOpaqueCaptureAddress
Loading device function: vkGetBufferOpaqueCaptureAddressKHR
Loading device function: vkGetBufferDeviceAddress
Loading device function: vkGetBufferDeviceAddressKHR
Loading device function: vkGetBufferDeviceAddressEXT
Loading device function: vkInitializePerformanceApiINTEL
Loading device function: vkUninitializePerformanceApiINTEL
Loading device function: vkCmdSetPerformanceMarkerINTEL
Loading device function: vkCmdSetPerformanceStreamMarkerINTEL
Loading device function: vkCmdSetPerformanceOverrideINTEL
Loading device function: vkAcquirePerformanceConfigurationINTEL
Loading device function: vkReleasePerformanceConfigurationINTEL
Loading device function: vkQueueSetPerformanceConfigurationINTEL
Loading device function: vkGetPerformanceParameterINTEL
Loading device function: vkGetDeviceMemoryOpaqueCaptureAddress
Loading device function: vkGetDeviceMemoryOpaqueCaptureAddressKHR
Loading device function: vkGetPipelineExecutablePropertiesKHR
Loading device function: vkGetPipelineExecutableStatisticsKHR
Loading device function: vkGetPipelineExecutableInternalRepresentationsKHR
Loading device function: vkCmdSetLineStippleEXT
Loading device function: vkGetFaultData
Loading device function: vkCreateAccelerationStructureKHR
Loading device function: vkCmdBuildAccelerationStructuresKHR
Loading device function: vkCmdBuildAccelerationStructuresIndirectKHR
Loading device function: vkBuildAccelerationStructuresKHR
Loading device function: vkGetAccelerationStructureDeviceAddressKHR
Loading device function: vkCreateDeferredOperationKHR
Loading device function: vkDestroyDeferredOperationKHR
Loading device function: vkGetDeferredOperationMaxConcurrencyKHR
Loading device function: vkGetDeferredOperationResultKHR
Loading device function: vkDeferredOperationJoinKHR
Loading device function: vkGetPipelineIndirectMemoryRequirementsNV
Loading device function: vkGetPipelineIndirectDeviceAddressNV
Loading device function: vkCmdSetCullMode
Loading device function: vkCmdSetCullModeEXT
Loading device function: vkCmdSetFrontFace
Loading device function: vkCmdSetFrontFaceEXT
Loading device function: vkCmdSetPrimitiveTopology
Loading device function: vkCmdSetPrimitiveTopologyEXT
Loading device function: vkCmdSetViewportWithCount
Loading device function: vkCmdSetViewportWithCountEXT
Loading device function: vkCmdSetScissorWithCount
Loading device function: vkCmdSetScissorWithCountEXT
Loading device function: vkCmdBindIndexBuffer2KHR
Loading device function: vkCmdBindVertexBuffers2
Loading device function: vkCmdBindVertexBuffers2EXT
Loading device function: vkCmdSetDepthTestEnable
Loading device function: vkCmdSetDepthTestEnableEXT
Loading device function: vkCmdSetDepthWriteEnable
Loading device function: vkCmdSetDepthWriteEnableEXT
Loading device function: vkCmdSetDepthCompareOp
Loading device function: vkCmdSetDepthCompareOpEXT
Loading device function: vkCmdSetDepthBoundsTestEnable
Loading device function: vkCmdSetDepthBoundsTestEnableEXT
Loading device function: vkCmdSetStencilTestEnable
Loading device function: vkCmdSetStencilTestEnableEXT
Loading device function: vkCmdSetStencilOp
Loading device function: vkCmdSetStencilOpEXT
Loading device function: vkCmdSetPatchControlPointsEXT
Loading device function: vkCmdSetRasterizerDiscardEnable
Loading device function: vkCmdSetRasterizerDiscardEnableEXT
Loading device function: vkCmdSetDepthBiasEnable
Loading device function: vkCmdSetDepthBiasEnableEXT
Loading device function: vkCmdSetLogicOpEXT
Loading device function: vkCmdSetPrimitiveRestartEnable
Loading device function: vkCmdSetPrimitiveRestartEnableEXT
Loading device function: vkCmdSetTessellationDomainOriginEXT
Loading device function: vkCmdSetDepthClampEnableEXT
Loading device function: vkCmdSetPolygonModeEXT
Loading device function: vkCmdSetRasterizationSamplesEXT
Loading device function: vkCmdSetSampleMaskEXT
Loading device function: vkCmdSetAlphaToCoverageEnableEXT
Loading device function: vkCmdSetAlphaToOneEnableEXT
Loading device function: vkCmdSetLogicOpEnableEXT
Loading device function: vkCmdSetColorBlendEnableEXT
Loading device function: vkCmdSetColorBlendEquationEXT
Loading device function: vkCmdSetColorWriteMaskEXT
Loading device function: vkCmdSetRasterizationStreamEXT
Loading device function: vkCmdSetConservativeRasterizationModeEXT
Loading device function: vkCmdSetExtraPrimitiveOverestimationSizeEXT
Loading device function: vkCmdSetDepthClipEnableEXT
Loading device function: vkCmdSetSampleLocationsEnableEXT
Loading device function: vkCmdSetColorBlendAdvancedEXT
Loading device function: vkCmdSetProvokingVertexModeEXT
Loading device function: vkCmdSetLineRasterizationModeEXT
Loading device function: vkCmdSetLineStippleEnableEXT
Loading device function: vkCmdSetDepthClipNegativeOneToOneEXT
Loading device function: vkCmdSetViewportWScalingEnableNV
Loading device function: vkCmdSetViewportSwizzleNV
Loading device function: vkCmdSetCoverageToColorEnableNV
Loading device function: vkCmdSetCoverageToColorLocationNV
Loading device function: vkCmdSetCoverageModulationModeNV
Loading device function: vkCmdSetCoverageModulationTableEnableNV
Loading device function: vkCmdSetCoverageModulationTableNV
Loading device function: vkCmdSetShadingRateImageEnableNV
Loading device function: vkCmdSetCoverageReductionModeNV
Loading device function: vkCmdSetRepresentativeFragmentTestEnableNV
Loading device function: vkCreatePrivateDataSlot
Loading device function: vkCreatePrivateDataSlotEXT
Loading device function: vkDestroyPrivateDataSlot
Loading device function: vkDestroyPrivateDataSlotEXT
Loading device function: vkSetPrivateData
Loading device function: vkSetPrivateDataEXT
Loading device function: vkGetPrivateData
Loading device function: vkGetPrivateDataEXT
Loading device function: vkCmdCopyBuffer2
Loading device function: vkCmdCopyBuffer2KHR
Loading device function: vkCmdCopyImage2
Loading device function: vkCmdCopyImage2KHR
Loading device function: vkCmdBlitImage2
Loading device function: vkCmdBlitImage2KHR
Loading device function: vkCmdCopyBufferToImage2
Loading device function: vkCmdCopyBufferToImage2KHR
Loading device function: vkCmdCopyImageToBuffer2
Loading device function: vkCmdCopyImageToBuffer2KHR
Loading device function: vkCmdResolveImage2
Loading device function: vkCmdResolveImage2KHR
Loading device function: vkCmdRefreshObjectsKHR
Loading device function: vkCmdSetFragmentShadingRateKHR
Loading device function: vkCmdSetFragmentShadingRateEnumNV
Loading device function: vkGetAccelerationStructureBuildSizesKHR
Loading device function: vkCmdSetVertexInputEXT
Loading device function: vkCmdSetColorWriteEnableEXT
Loading device function: vkCmdSetEvent2
Loading device function: vkCmdSetEvent2KHR
Loading device function: vkCmdResetEvent2
Loading device function: vkCmdResetEvent2KHR
Loading device function: vkCmdWaitEvents2
Loading device function: vkCmdWaitEvents2KHR
Loading device function: vkCmdPipelineBarrier2
Loading device function: vkCmdPipelineBarrier2KHR
Loading device function: vkQueueSubmit2
Loading device function: vkQueueSubmit2KHR
Loading device function: vkCmdWriteTimestamp2
Loading device function: vkCmdWriteTimestamp2KHR
Loading device function: vkCmdWriteBufferMarker2AMD
Loading device function: vkGetQueueCheckpointData2NV
Loading device function: vkCopyMemoryToImageEXT
Loading device function: vkCopyImageToMemoryEXT
Loading device function: vkCopyImageToImageEXT
Loading device function: vkTransitionImageLayoutEXT
Loading device function: vkGetCommandPoolMemoryConsumption
Loading device function: vkCreateVideoSessionKHR
Loading device function: vkDestroyVideoSessionKHR
Loading device function: vkCreateVideoSessionParametersKHR
Loading device function: vkUpdateVideoSessionParametersKHR
Loading device function: vkGetEncodedVideoSessionParametersKHR
Loading device function: vkDestroyVideoSessionParametersKHR
Loading device function: vkGetVideoSessionMemoryRequirementsKHR
Loading device function: vkBindVideoSessionMemoryKHR
Loading device function: vkCmdDecodeVideoKHR
Loading device function: vkCmdBeginVideoCodingKHR
Loading device function: vkCmdControlVideoCodingKHR
Loading device function: vkCmdEndVideoCodingKHR
Loading device function: vkCmdEncodeVideoKHR
Loading device function: vkCmdDecompressMemoryNV
Loading device function: vkCmdDecompressMemoryIndirectCountNV
Loading device function: vkCreateCuModuleNVX
Loading device function: vkCreateCuFunctionNVX
Loading device function: vkDestroyCuModuleNVX
Loading device function: vkDestroyCuFunctionNVX
Loading device function: vkCmdCuLaunchKernelNVX
Loading device function: vkGetDescriptorSetLayoutSizeEXT
Loading device function: vkGetDescriptorSetLayoutBindingOffsetEXT
Loading device function: vkGetDescriptorEXT
Loading device function: vkCmdBindDescriptorBuffersEXT
Loading device function: vkCmdSetDescriptorBufferOffsetsEXT
Loading device function: vkCmdBindDescriptorBufferEmbeddedSamplersEXT
Loading device function: vkGetBufferOpaqueCaptureDescriptorDataEXT
Loading device function: vkGetImageOpaqueCaptureDescriptorDataEXT
Loading device function: vkGetImageViewOpaqueCaptureDescriptorDataEXT
Loading device function: vkGetSamplerOpaqueCaptureDescriptorDataEXT
Loading device function: vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT
Loading device function: vkSetDeviceMemoryPriorityEXT
Loading device function: vkWaitForPresentKHR
Loading device function: vkCreateBufferCollectionFUCHSIA
Loading device function: vkSetBufferCollectionBufferConstraintsFUCHSIA
Loading device function: vkSetBufferCollectionImageConstraintsFUCHSIA
Loading device function: vkDestroyBufferCollectionFUCHSIA
Loading device function: vkGetBufferCollectionPropertiesFUCHSIA
Loading device function: vkCmdBeginRendering
Loading device function: vkCmdBeginRenderingKHR
Loading device function: vkCmdEndRendering
Loading device function: vkCmdEndRenderingKHR
Loading device function: vkGetDescriptorSetLayoutHostMappingInfoVALVE
Loading device function: vkGetDescriptorSetHostMappingVALVE
Loading device function: vkCreateMicromapEXT
Loading device function: vkCmdBuildMicromapsEXT
Loading device function: vkBuildMicromapsEXT
Loading device function: vkDestroyMicromapEXT
Loading device function: vkCmdCopyMicromapEXT
Loading device function: vkCopyMicromapEXT
Loading device function: vkCmdCopyMicromapToMemoryEXT
Loading device function: vkCopyMicromapToMemoryEXT
Loading device function: vkCmdCopyMemoryToMicromapEXT
Loading device function: vkCopyMemoryToMicromapEXT
Loading device function: vkCmdWriteMicromapsPropertiesEXT
Loading device function: vkWriteMicromapsPropertiesEXT
Loading device function: vkGetDeviceMicromapCompatibilityEXT
Loading device function: vkGetMicromapBuildSizesEXT
Loading device function: vkGetShaderModuleIdentifierEXT
Loading device function: vkGetShaderModuleCreateInfoIdentifierEXT
Loading device function: vkGetImageSubresourceLayout2KHR
Loading device function: vkGetImageSubresourceLayout2EXT
Loading device function: vkGetPipelinePropertiesEXT
Loading device function: vkExportMetalObjectsEXT
Loading device function: vkGetFramebufferTilePropertiesQCOM
Loading device function: vkGetDynamicRenderingTilePropertiesQCOM
Loading device function: vkCreateOpticalFlowSessionNV
Loading device function: vkDestroyOpticalFlowSessionNV
Loading device function: vkBindOpticalFlowSessionImageNV
Loading device function: vkCmdOpticalFlowExecuteNV
Loading device function: vkGetDeviceFaultInfoEXT
Loading device function: vkCmdSetDepthBias2EXT
Loading device function: vkReleaseSwapchainImagesEXT
Loading device function: vkGetDeviceImageSubresourceLayoutKHR
Loading device function: vkMapMemory2KHR
Loading device function: vkUnmapMemory2KHR
Loading device function: vkCreateShadersEXT
Loading device function: vkDestroyShaderEXT
Loading device function: vkGetShaderBinaryDataEXT
Loading device function: vkCmdBindShadersEXT
Loading device function: vkGetScreenBufferPropertiesQNX
Loading device function: vkGetExecutionGraphPipelineScratchSizeAMDX
Loading device function: vkGetExecutionGraphPipelineNodeIndexAMDX
Loading device function: vkCreateExecutionGraphPipelinesAMDX
Loading device function: vkCmdInitializeGraphScratchMemoryAMDX
Loading device function: vkCmdDispatchGraphAMDX
Loading device function: vkCmdDispatchGraphIndirectAMDX
Loading device function: vkCmdDispatchGraphIndirectCountAMDX
Loading device function: vkSetLatencySleepModeNV
Loading device function: vkLatencySleepNV
Loading device function: vkSetLatencyMarkerNV
Loading device function: vkGetLatencyTimingsNV
Loading device function: vkQueueNotifyOutOfBandNV
Initializing Vulkan renderer...
Surface created successfully: vk.SurfaceKHR(18256227295918292993)
Surface support verified successfully
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(18065711617638662146)
Swapchain has 3 images
Creating 3 image views
Created sync objects for frame 0: semaphore1=vk.Semaphore(10844053275708227598), semaphore2=vk.Semaphore(16710272165823381519), fence=vk.Fence(15398492121723830288)
Created sync objects for frame 1: semaphore1=vk.Semaphore(10957035792043606033), semaphore2=vk.Semaphore(15909243860128104466), fence=vk.Fence(15093167638295085075)
Renderer successfully initialized: gfx.vk.render.Renderer{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .instance = gfx.vk.render.Instance{ .instance = vk.Instance(1562524741520), .dispatch = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 } }, .device = gfx.vk.render.Device{ .physical_device = gfx.vk.render.PhysicalDevice{ .handle = vk.PhysicalDevice(1562649101072), .properties = vk.PhysicalDeviceProperties{ ... }, .features = vk.PhysicalDeviceFeatures{ ... }, .memory_properties = vk.PhysicalDeviceMemoryProperties{ ... }, .graphics_queue_family = 0 }, .device = vk.Device(1562649478528), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .graphics_queue = vk.Queue(1562649710112), .graphics_queue_family = 0 }, .vertex_pool = null, .pipeline_layout = vk.PipelineLayout(17177993417163014153), .pipeline = vk.Pipeline(16755241091887792140), .command_pool = vk.CommandPool(14614341319514914829), .vertex_shader_module = vk.ShaderModule(14983252759401201674), .fragment_shader_module = vk.ShaderModule(17026962300948447243), .surface = vk.SurfaceKHR(18256227295918292993), .swapchain = vk.SwapchainKHR(18065711617638662146), .swapchain_images = array_list.ArrayListAligned(vk.Image,null){ .items = { vk.Image(18023867503620390915), vk.Image(17684680261079400452), vk.Image(16714997866799562757) }, .capacity = 16, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .swapchain_image_views = array_list.ArrayListAligned(vk.ImageView,null){ .items = { vk.ImageView(17600992033042857990), vk.ImageView(14645398124953075719), vk.ImageView(16922617547960877064) }, .capacity = 16, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .swapchain_extent = vk.Extent2D{ .width = 800, .height = 600 }, .swapchain_format = vk.Format.b8g8r8a8_unorm, .image_available_semaphores = { vk.Semaphore(10844053275708227598), vk.Semaphore(10957035792043606033) }, .render_finished_semaphores = { vk.Semaphore(16710272165823381519), vk.Semaphore(15909243860128104466) }, .in_flight_fences = { vk.Fence(15398492121723830288), vk.Fence(15093167638295085075) }, .command_buffers = { vk.CommandBuffer(1562768240448), vk.CommandBuffer(1562768271184) }, .current_frame = 0, .max_frames_in_flight = 2, .current_image_index = 0, .image_acquired = false, .main_camera = null }
Validation Error: [ VUID-vkFreeCommandBuffers-pCommandBuffers-parent ] | MessageID = 0xa280b4a2
vkFreeCommandBuffers(): pCommandBuffers[0] attempting to free VkCommandBuffer 0x16bdc3eef40 belonging to VkCommandPool 0xcad092000000000d from VkCommandPool 0x27d60e0000000019.
The Vulkan spec states: Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://vulkan.lunarg.com/doc/view/1.4.309.0/windows/antora/spec/latest/chapters/cmdbuffers.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
Objects: 3
    [0] VkCommandBuffer 0x16bdc3eef40
    [1] VkCommandPool 0xcad092000000000d
    [2] VkCommandPool 0x27d60e0000000019

Validation Error: [ VUID-vkFreeCommandBuffers-pCommandBuffers-parent ] | MessageID = 0xa280b4a2
vkFreeCommandBuffers(): pCommandBuffers[1] attempting to free VkCommandBuffer 0x16bdc3f6750 belonging to VkCommandPool 0xcad092000000000d from VkCommandPool 0x27d60e0000000019.
The Vulkan spec states: Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://vulkan.lunarg.com/doc/view/1.4.309.0/windows/antora/spec/latest/chapters/cmdbuffers.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
Objects: 3
    [0] VkCommandBuffer 0x16bdc3f6750
    [1] VkCommandPool 0xcad092000000000d
    [2] VkCommandPool 0x27d60e0000000019

Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(9526273196655902952)
Swapchain has 3 images
Creating 3 image views
Validation Error: [ VUID-vkFreeCommandBuffers-pCommandBuffers-parent ] | MessageID = 0xa280b4a2
vkFreeCommandBuffers(): pCommandBuffers[0] attempting to free VkCommandBuffer 0x16bdc3eef40 belonging to VkCommandPool 0x27d60e0000000019 from VkCommandPool 0x70526c00000000f3.
The Vulkan spec states: Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://vulkan.lunarg.com/doc/view/1.4.309.0/windows/antora/spec/latest/chapters/cmdbuffers.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
Objects: 3
    [0] VkCommandBuffer 0x16bdc3eef40
    [1] VkCommandPool 0x27d60e0000000019
    [2] VkCommandPool 0x70526c00000000f3

Validation Error: [ VUID-vkFreeCommandBuffers-pCommandBuffers-parent ] | MessageID = 0xa280b4a2
vkFreeCommandBuffers(): pCommandBuffers[1] attempting to free VkCommandBuffer 0x16bdc3f6750 belonging to VkCommandPool 0x27d60e0000000019 from VkCommandPool 0x70526c00000000f3.
The Vulkan spec states: Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://vulkan.lunarg.com/doc/view/1.4.309.0/windows/antora/spec/latest/chapters/cmdbuffers.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
Objects: 3
    [0] VkCommandBuffer 0x16bdc3f6750
    [1] VkCommandPool 0x27d60e0000000019
    [2] VkCommandPool 0x70526c00000000f3

Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(7493852340991033588)
Swapchain has 3 images
Creating 3 image views
Validation Error: [ VUID-vkFreeCommandBuffers-pCommandBuffers-parent ] | MessageID = 0xa280b4a2
vkFreeCommandBuffers(): pCommandBuffers[0] attempting to free VkCommandBuffer 0x16bdc3eef40 belonging to VkCommandPool 0x70526c00000000f3 from VkCommandPool 0x18543900000000ff.
The Vulkan spec states: Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://vulkan.lunarg.com/doc/view/1.4.309.0/windows/antora/spec/latest/chapters/cmdbuffers.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
Objects: 3
    [0] VkCommandBuffer 0x16bdc3eef40
    [1] VkCommandPool 0x70526c00000000f3
    [2] VkCommandPool 0x18543900000000ff

Validation Error: [ VUID-vkFreeCommandBuffers-pCommandBuffers-parent ] | MessageID = 0xa280b4a2
vkFreeCommandBuffers(): pCommandBuffers[1] attempting to free VkCommandBuffer 0x16bdc3f6750 belonging to VkCommandPool 0x70526c00000000f3 from VkCommandPool 0x18543900000000ff.
The Vulkan spec states: Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://vulkan.lunarg.com/doc/view/1.4.309.0/windows/antora/spec/latest/chapters/cmdbuffers.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
Objects: 3
    [0] VkCommandBuffer 0x16bdc3f6750
    [1] VkCommandPool 0x70526c00000000f3
    [2] VkCommandPool 0x18543900000000ff

Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(6568207586426880256)
Swapchain has 3 images
Creating 3 image views
Validation Error: [ VUID-vkFreeCommandBuffers-pCommandBuffers-parent ] | MessageID = 0xa280b4a2
vkFreeCommandBuffers(): pCommandBuffers[0] attempting to free VkCommandBuffer 0x16bdc3eef40 belonging to VkCommandPool 0x18543900000000ff from VkCommandPool 0x20ead5000000010b.
The Vulkan spec states: Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://vulkan.lunarg.com/doc/view/1.4.309.0/windows/antora/spec/latest/chapters/cmdbuffers.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
Objects: 3
    [0] VkCommandBuffer 0x16bdc3eef40
    [1] VkCommandPool 0x18543900000000ff
    [2] VkCommandPool 0x20ead5000000010b

Validation Error: [ VUID-vkFreeCommandBuffers-pCommandBuffers-parent ] | MessageID = 0xa280b4a2
vkFreeCommandBuffers(): pCommandBuffers[1] attempting to free VkCommandBuffer 0x16bdc3f6750 belonging to VkCommandPool 0x18543900000000ff from VkCommandPool 0x20ead5000000010b.
The Vulkan spec states: Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://vulkan.lunarg.com/doc/view/1.4.309.0/windows/antora/spec/latest/chapters/cmdbuffers.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
Objects: 3
    [0] VkCommandBuffer 0x16bdc3f6750
    [1] VkCommandPool 0x18543900000000ff
    [2] VkCommandPool 0x20ead5000000010b

Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(5579284838172590348)
Swapchain has 3 images
Creating 3 image views
Validation Error: [ VUID-vkFreeCommandBuffers-pCommandBuffers-parent ] | MessageID = 0xa280b4a2
vkFreeCommandBuffers(): pCommandBuffers[0] attempting to free VkCommandBuffer 0x16bdc3eef40 belonging to VkCommandPool 0x20ead5000000010b from VkCommandPool 0x3f21420000000117.
The Vulkan spec states: Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://vulkan.lunarg.com/doc/view/1.4.309.0/windows/antora/spec/latest/chapters/cmdbuffers.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
Objects: 3
    [0] VkCommandBuffer 0x16bdc3eef40
    [1] VkCommandPool 0x20ead5000000010b
    [2] VkCommandPool 0x3f21420000000117

Validation Error: [ VUID-vkFreeCommandBuffers-pCommandBuffers-parent ] | MessageID = 0xa280b4a2
vkFreeCommandBuffers(): pCommandBuffers[1] attempting to free VkCommandBuffer 0x16bdc3f6750 belonging to VkCommandPool 0x20ead5000000010b from VkCommandPool 0x3f21420000000117.
The Vulkan spec states: Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://vulkan.lunarg.com/doc/view/1.4.309.0/windows/antora/spec/latest/chapters/cmdbuffers.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
Objects: 3
    [0] VkCommandBuffer 0x16bdc3f6750
    [1] VkCommandPool 0x20ead5000000010b
    [2] VkCommandPool 0x3f21420000000117

Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(4479442257396629784)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(202926965533966628)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(1683013652543701296)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(17530903664330277180)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(14465839080044233032)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(11656766091471880532)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(9907236383494242656)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(13200329783776379244)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(6624665309489922424)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(5631492948794278276)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(9034468242621464976)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(1577997097951560092)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(1489943808752746920)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(4355196343946314164)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(14968327988565770688)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(15779384939817992652)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(17690972766125162968)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(9658402608477372900)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(16326706434962096624)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(14924631197454696956)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(3501307917234078216)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(2894785417515631124)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(137021139053445664)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(8735091017587360300)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(5725573760736559672)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(6499518896016458308)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(12018904539731067472)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(9602541920228213340)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(11331761449417572968)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(17061954258502419060)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(18144272822954885760)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(16678768958664344204)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(1531152405050163864)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 }, .capacity = 152, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .indirect_buffer = vk.Buffer(9859141545872064738), .indirect_memory = vk.DeviceMemory(7831755353950781667), .indirect_mapped = anyopaque@16bd25f9000, .index_buffer = vk.Buffer(5848120928721961188), .index_memory = vk.DeviceMemory(10364315461788631269), .draw_commands = array_list.ArrayListAligned(gfx.vk.vertex_pool.DrawCommand,null){ .items = { gfx.vk.vertex_pool.DrawCommand{ ... } }, .capacity = 1062, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .effective_draws = 1, .buffer_size = 40960, .vertex_per_buffer = 1024, .max_draw_commands = 1000 }
Invalid image index or image not acquired, skipping render
No valid image to present. Recreating swapchain...
Found 5 surface formats
Selected format: vk.Format.b8g8r8a8_unorm, color space: vk.ColorSpaceKHR.srgb_nonlinear_khr
Creating swapchain with image count: 3, extent: 800x600
Creating swapchain with extent: 800x600
Successfully created swapchain: vk.SwapchainKHR(4460326148236116644)
Swapchain has 3 images
Creating 3 image views
Render with valid renderer, vertex_pool: gfx.vk.vertex_pool.VertexPool{ .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ .alloc = fn (*anyopaque, usize, mem.Alignment, usize) ?[*]u8@7ffc0d17ed40, .resize = fn (*anyopaque, []u8, mem.Alignment, usize, usize) bool@7ffc0d17ef30, .remap = fn (*anyopaque, []u8, mem.Alignment, usize, usize) ?[*]u8@7ffc0d17f030, .free = fn (*anyopaque, []u8, mem.Alignment, usize) void@7ffc0d17f0b0 } }, .device = vk.Device(1562649478528), .physical_device = vk.PhysicalDevice(1562649101072), .dispatch = vk.DeviceDispatch{ .vkDestroyDevice = fn (vk.Device, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e952e0, .vkGetDeviceQueue = fn (vk.Device, u32, u32, *vk.Queue) callconv(.c) void@7ffc22e99480, .vkQueueSubmit = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b6f8a0, .vkQueueWaitIdle = fn (vk.Queue) callconv(.c) vk.Result@7ffbe1b6fb50, .vkDeviceWaitIdle = fn (vk.Device) callconv(.c) vk.Result@7ffbe1b6fdc0, .vkAllocateMemory = fn (vk.Device, *const vk.MemoryAllocateInfo, ?*const vk.AllocationCallbacks, *vk.DeviceMemory) callconv(.c) vk.Result@7ffbe1b70030, .vkFreeMemory = fn (vk.Device, vk.DeviceMemory, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b702d0, .vkMapMemory = fn (vk.Device, vk.DeviceMemory, u64, u64, vk.MemoryMapFlags, *?*anyopaque) callconv(.c) vk.Result@7ffbe1b70580, .vkUnmapMemory = fn (vk.Device, vk.DeviceMemory) callconv(.c) void@7ffbe1b708d0, .vkFlushMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70b50, .vkInvalidateMappedMemoryRanges = fn (vk.Device, u32, [*]const vk.MappedMemoryRange) callconv(.c) vk.Result@7ffbe1b70de0, .vkGetDeviceMemoryCommitment = fn (vk.Device, vk.DeviceMemory, *u64) callconv(.c) void@7ffbe1b71070, .vkGetBufferMemoryRequirements = fn (vk.Device, vk.Buffer, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b718b0, .vkBindBufferMemory = fn (vk.Device, vk.Buffer, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b71310, .vkGetImageMemoryRequirements = fn (vk.Device, vk.Image, *vk.MemoryRequirements) callconv(.c) void@7ffbe1b71b50, .vkBindImageMemory = fn (vk.Device, vk.Image, vk.DeviceMemory, u64) callconv(.c) vk.Result@7ffbe1b715e0, .vkGetImageSparseMemoryRequirements = fn (vk.Device, vk.Image, *u32, ?[*]vk.SparseImageMemoryRequirements) callconv(.c) void@7ffbe1b71df0, .vkQueueBindSparse = fn (vk.Queue, u32, ?[*]const vk.BindSparseInfo, vk.Fence) callconv(.c) vk.Result@7ffbe1b72390, .vkCreateFence = fn (vk.Device, *const vk.FenceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Fence) callconv(.c) vk.Result@7ffbe1b72640, .vkDestroyFence = fn (vk.Device, vk.Fence, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b72900, .vkResetFences = fn (vk.Device, u32, [*]const vk.Fence) callconv(.c) vk.Result@7ffbe1b72bb0, .vkGetFenceStatus = fn (vk.Device, vk.Fence) callconv(.c) vk.Result@7ffbe1b72e40, .vkWaitForFences = fn (vk.Device, u32, [*]const vk.Fence, u32, u64) callconv(.c) vk.Result@7ffbe1b730f0, .vkCreateSemaphore = fn (vk.Device, *const vk.SemaphoreCreateInfo, ?*const vk.AllocationCallbacks, *vk.Semaphore) callconv(.c) vk.Result@7ffbe1b733c0, .vkDestroySemaphore = fn (vk.Device, vk.Semaphore, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73660, .vkCreateEvent = fn (vk.Device, *const vk.EventCreateInfo, ?*const vk.AllocationCallbacks, *vk.Event) callconv(.c) vk.Result@7ffbe1b73910, .vkDestroyEvent = fn (vk.Device, vk.Event, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b73c30, .vkGetEventStatus = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b73ee0, .vkSetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74190, .vkResetEvent = fn (vk.Device, vk.Event) callconv(.c) vk.Result@7ffbe1b74420, .vkCreateQueryPool = fn (vk.Device, *const vk.QueryPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.QueryPool) callconv(.c) vk.Result@7ffbe1b746b0, .vkDestroyQueryPool = fn (vk.Device, vk.QueryPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b749d0, .vkGetQueryPoolResults = fn (vk.Device, vk.QueryPool, u32, u32, usize, *anyopaque, u64, vk.QueryResultFlags) callconv(.c) vk.Result@7ffbe1b74c80, .vkResetQueryPool = fn (vk.Device, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b88690, .vkResetQueryPoolEXT = null, .vkCreateBuffer = fn (vk.Device, *const vk.BufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Buffer) callconv(.c) vk.Result@7ffbe195b490, .vkDestroyBuffer = fn (vk.Device, vk.Buffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75070, .vkCreateBufferView = fn (vk.Device, *const vk.BufferViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.BufferView) callconv(.c) vk.Result@7ffbe1b75320, .vkDestroyBufferView = fn (vk.Device, vk.BufferView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b756a0, .vkCreateImage = fn (vk.Device, *const vk.ImageCreateInfo, ?*const vk.AllocationCallbacks, *vk.Image) callconv(.c) vk.Result@7ffbe1b75950, .vkDestroyImage = fn (vk.Device, vk.Image, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b75bf0, .vkGetImageSubresourceLayout = fn (vk.Device, vk.Image, *const vk.ImageSubresource, *vk.SubresourceLayout) callconv(.c) void@7ffbe1b75ea0, .vkCreateImageView = fn (vk.Device, *const vk.ImageViewCreateInfo, ?*const vk.AllocationCallbacks, *vk.ImageView) callconv(.c) vk.Result@7ffbe1b76150, .vkDestroyImageView = fn (vk.Device, vk.ImageView, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b764e0, .vkCreateShaderModule = fn (vk.Device, *const vk.ShaderModuleCreateInfo, ?*const vk.AllocationCallbacks, *vk.ShaderModule) callconv(.c) vk.Result@7ffbe195a940, .vkDestroyShaderModule = fn (vk.Device, vk.ShaderModule, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76790, .vkCreatePipelineCache = fn (vk.Device, *const vk.PipelineCacheCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b76a40, .vkDestroyPipelineCache = fn (vk.Device, vk.PipelineCache, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b76d60, .vkGetPipelineCacheData = fn (vk.Device, vk.PipelineCache, *usize, ?*anyopaque) callconv(.c) vk.Result@7ffbe1b77010, .vkMergePipelineCaches = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.PipelineCache) callconv(.c) vk.Result@7ffbe1b772d0, .vkCreateGraphicsPipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.GraphicsPipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe19593b0, .vkCreateComputePipelines = fn (vk.Device, vk.PipelineCache, u32, [*]const vk.ComputePipelineCreateInfo, ?*const vk.AllocationCallbacks, [*]vk.Pipeline) callconv(.c) vk.Result@7ffbe1959870, .vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = null, .vkDestroyPipeline = fn (vk.Device, vk.Pipeline, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77570, .vkCreatePipelineLayout = fn (vk.Device, *const vk.PipelineLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.PipelineLayout) callconv(.c) vk.Result@7ffbe195a600, .vkDestroyPipelineLayout = fn (vk.Device, vk.PipelineLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77820, .vkCreateSampler = fn (vk.Device, *const vk.SamplerCreateInfo, ?*const vk.AllocationCallbacks, *vk.Sampler) callconv(.c) vk.Result@7ffbe1b77ad0, .vkDestroySampler = fn (vk.Device, vk.Sampler, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b77e60, .vkCreateDescriptorSetLayout = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorSetLayout) callconv(.c) vk.Result@7ffbe1b78110, .vkDestroyDescriptorSetLayout = fn (vk.Device, vk.DescriptorSetLayout, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b783b0, .vkCreateDescriptorPool = fn (vk.Device, *const vk.DescriptorPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorPool) callconv(.c) vk.Result@7ffbe1b78660, .vkDestroyDescriptorPool = fn (vk.Device, vk.DescriptorPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b78900, .vkResetDescriptorPool = fn (vk.Device, vk.DescriptorPool, vk.DescriptorPoolResetFlags) callconv(.c) vk.Result@7ffbe1b78b80, .vkAllocateDescriptorSets = fn (vk.Device, *const vk.DescriptorSetAllocateInfo, [*]vk.DescriptorSet) callconv(.c) vk.Result@7ffbe195b060, .vkFreeDescriptorSets = fn (vk.Device, vk.DescriptorPool, u32, [*]const vk.DescriptorSet) callconv(.c) vk.Result@7ffbe1b78e10, .vkUpdateDescriptorSets = fn (vk.Device, u32, ?[*]const vk.WriteDescriptorSet, u32, ?[*]const vk.CopyDescriptorSet) callconv(.c) void@7ffbe1b790b0, .vkCreateFramebuffer = fn (vk.Device, *const vk.FramebufferCreateInfo, ?*const vk.AllocationCallbacks, *vk.Framebuffer) callconv(.c) vk.Result@7ffbe1b79360, .vkDestroyFramebuffer = fn (vk.Device, vk.Framebuffer, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79730, .vkCreateRenderPass = fn (vk.Device, *const vk.RenderPassCreateInfo, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b799e0, .vkDestroyRenderPass = fn (vk.Device, vk.RenderPass, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b79cc0, .vkGetRenderAreaGranularity = fn (vk.Device, vk.RenderPass, *vk.Extent2D) callconv(.c) void@7ffbe1b79f40, .vkGetRenderingAreaGranularityKHR = null, .vkCreateCommandPool = fn (vk.Device, *const vk.CommandPoolCreateInfo, ?*const vk.AllocationCallbacks, *vk.CommandPool) callconv(.c) vk.Result@7ffbe1b7a1e0, .vkDestroyCommandPool = fn (vk.Device, vk.CommandPool, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b7a480, .vkResetCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolResetFlags) callconv(.c) vk.Result@7ffbe1b7a700, .vkAllocateCommandBuffers = fn (vk.Device, *const vk.CommandBufferAllocateInfo, [*]vk.CommandBuffer) callconv(.c) vk.Result@7ffc22e9c570, .vkFreeCommandBuffers = fn (vk.Device, vk.CommandPool, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b7ac40, .vkBeginCommandBuffer = fn (vk.CommandBuffer, *const vk.CommandBufferBeginInfo) callconv(.c) vk.Result@7ffbe195bb10, .vkEndCommandBuffer = fn (vk.CommandBuffer) callconv(.c) vk.Result@7ffbe1b7aec0, .vkResetCommandBuffer = fn (vk.CommandBuffer, vk.CommandBufferResetFlags) callconv(.c) vk.Result@7ffbe1b7b120, .vkCmdBindPipeline = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.Pipeline) callconv(.c) void@7ffbe1b7b390, .vkCmdSetAttachmentFeedbackLoopEnableEXT = null, .vkCmdSetViewport = fn (vk.CommandBuffer, u32, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b7b630, .vkCmdSetScissor = fn (vk.CommandBuffer, u32, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b7b8b0, .vkCmdSetLineWidth = fn (vk.CommandBuffer, f32) callconv(.c) void@7ffbe1b7bb30, .vkCmdSetDepthBias = fn (vk.CommandBuffer, f32, f32, f32) callconv(.c) void@7ffbe1b7bda0, .vkCmdSetBlendConstants = fn (vk.CommandBuffer, *const [4]f32) callconv(.c) void@7ffbe1b7c060, .vkCmdSetDepthBounds = fn (vk.CommandBuffer, f32, f32) callconv(.c) void@7ffbe1b7c2c0, .vkCmdSetStencilCompareMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c550, .vkCmdSetStencilWriteMask = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7c7d0, .vkCmdSetStencilReference = fn (vk.CommandBuffer, vk.StencilFaceFlags, u32) callconv(.c) void@7ffbe1b7ca50, .vkCmdBindDescriptorSets = fn (vk.CommandBuffer, vk.PipelineBindPoint, vk.PipelineLayout, u32, u32, [*]const vk.DescriptorSet, u32, ?[*]const u32) callconv(.c) void@7ffbe1b7ccd0, .vkCmdBindIndexBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, vk.IndexType) callconv(.c) void@7ffbe1b7d010, .vkCmdBindVertexBuffers = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64) callconv(.c) void@7ffbe1b7d2c0, .vkCmdDraw = fn (vk.CommandBuffer, u32, u32, u32, u32) callconv(.c) void@7ffbe1b7d570, .vkCmdDrawIndexed = fn (vk.CommandBuffer, u32, u32, u32, i32, u32) callconv(.c) void@7ffbe1b7d820, .vkCmdDrawMultiEXT = null, .vkCmdDrawMultiIndexedEXT = null, .vkCmdDrawIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7db10, .vkCmdDrawIndexedIndirect = fn (vk.CommandBuffer, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b7de00, .vkCmdDispatch = fn (vk.CommandBuffer, u32, u32, u32) callconv(.c) void@7ffbe1b7e0f0, .vkCmdDispatchIndirect = fn (vk.CommandBuffer, vk.Buffer, u64) callconv(.c) void@7ffbe1b7e370, .vkCmdSubpassShadingHUAWEI = null, .vkCmdDrawClusterHUAWEI = null, .vkCmdDrawClusterIndirectHUAWEI = null, .vkCmdUpdatePipelineIndirectBufferNV = null, .vkCmdCopyBuffer = fn (vk.CommandBuffer, vk.Buffer, vk.Buffer, u32, [*]const vk.BufferCopy) callconv(.c) void@7ffbe1b7e610, .vkCmdCopyImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageCopy) callconv(.c) void@7ffbe1b7e8c0, .vkCmdBlitImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageBlit, vk.Filter) callconv(.c) void@7ffbe1b7ec30, .vkCmdCopyBufferToImage = fn (vk.CommandBuffer, vk.Buffer, vk.Image, vk.ImageLayout, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7efd0, .vkCmdCopyImageToBuffer = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Buffer, u32, [*]const vk.BufferImageCopy) callconv(.c) void@7ffbe1b7f310, .vkCmdCopyMemoryIndirectNV = null, .vkCmdCopyMemoryToImageIndirectNV = null, .vkCmdUpdateBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, *const anyopaque) callconv(.c) void@7ffbe1b7f650, .vkCmdFillBuffer = fn (vk.CommandBuffer, vk.Buffer, u64, u64, u32) callconv(.c) void@7ffbe1b7f940, .vkCmdClearColorImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearColorValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7fc30, .vkCmdClearDepthStencilImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, *const vk.ClearDepthStencilValue, u32, [*]const vk.ImageSubresourceRange) callconv(.c) void@7ffbe1b7ff60, .vkCmdClearAttachments = fn (vk.CommandBuffer, u32, [*]const vk.ClearAttachment, u32, [*]const vk.ClearRect) callconv(.c) void@7ffbe1b80290, .vkCmdResolveImage = fn (vk.CommandBuffer, vk.Image, vk.ImageLayout, vk.Image, vk.ImageLayout, u32, [*]const vk.ImageResolve) callconv(.c) void@7ffbe1b80540, .vkCmdSetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b808b0, .vkCmdResetEvent = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags) callconv(.c) void@7ffbe1b80b50, .vkCmdWaitEvents = fn (vk.CommandBuffer, u32, [*]const vk.Event, vk.PipelineStageFlags, vk.PipelineStageFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b80df0, .vkCmdPipelineBarrier = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.PipelineStageFlags, vk.DependencyFlags, u32, ?[*]const vk.MemoryBarrier, u32, ?[*]const vk.BufferMemoryBarrier, u32, ?[*]const vk.ImageMemoryBarrier) callconv(.c) void@7ffbe1b811d0, .vkCmdBeginQuery = fn (vk.CommandBuffer, vk.QueryPool, u32, vk.QueryControlFlags) callconv(.c) void@7ffbe1b81580, .vkCmdEndQuery = fn (vk.CommandBuffer, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81830, .vkCmdBeginConditionalRenderingEXT = null, .vkCmdEndConditionalRenderingEXT = null, .vkCmdResetQueryPool = fn (vk.CommandBuffer, vk.QueryPool, u32, u32) callconv(.c) void@7ffbe1b81ad0, .vkCmdWriteTimestamp = fn (vk.CommandBuffer, vk.PipelineStageFlags, vk.QueryPool, u32) callconv(.c) void@7ffbe1b81d80, .vkCmdCopyQueryPoolResults = fn (vk.CommandBuffer, vk.QueryPool, u32, u32, vk.Buffer, u64, u64, vk.QueryResultFlags) callconv(.c) void@7ffbe1b82030, .vkCmdPushConstants = fn (vk.CommandBuffer, vk.PipelineLayout, vk.ShaderStageFlags, u32, u32, *const anyopaque) callconv(.c) void@7ffbe1b823f0, .vkCmdBeginRenderPass = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, vk.SubpassContents) callconv(.c) void@7ffbe1b82720, .vkCmdNextSubpass = fn (vk.CommandBuffer, vk.SubpassContents) callconv(.c) void@7ffbe1b82a20, .vkCmdEndRenderPass = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b82c80, .vkCmdExecuteCommands = fn (vk.CommandBuffer, u32, [*]const vk.CommandBuffer) callconv(.c) void@7ffbe1b82ee0, .vkCreateSharedSwapchainsKHR = null, .vkCreateSwapchainKHR = fn (vk.Device, *const vk.SwapchainCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SwapchainKHR) callconv(.c) vk.Result@7ffbe1b93a20, .vkDestroySwapchainKHR = fn (vk.Device, vk.SwapchainKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b93d80, .vkGetSwapchainImagesKHR = fn (vk.Device, vk.SwapchainKHR, *u32, ?[*]vk.Image) callconv(.c) vk.Result@7ffbe1b940d0, .vkAcquireNextImageKHR = fn (vk.Device, vk.SwapchainKHR, u64, vk.Semaphore, vk.Fence, *u32) callconv(.c) vk.Result@7ffbe1b94370, .vkQueuePresentKHR = fn (vk.Queue, *const vk.PresentInfoKHR) callconv(.c) vk.Result@7ffbe195b760, .vkDebugMarkerSetObjectNameEXT = null, .vkDebugMarkerSetObjectTagEXT = null, .vkCmdDebugMarkerBeginEXT = null, .vkCmdDebugMarkerEndEXT = null, .vkCmdDebugMarkerInsertEXT = null, .vkGetMemoryWin32HandleNV = null, .vkCmdExecuteGeneratedCommandsNV = null, .vkCmdPreprocessGeneratedCommandsNV = null, .vkCmdBindPipelineShaderGroupNV = null, .vkGetGeneratedCommandsMemoryRequirementsNV = null, .vkCreateIndirectCommandsLayoutNV = null, .vkDestroyIndirectCommandsLayoutNV = null, .vkCmdPushDescriptorSetKHR = null, .vkTrimCommandPool = fn (vk.Device, vk.CommandPool, vk.CommandPoolTrimFlags) callconv(.c) void@7ffbe1b857c0, .vkTrimCommandPoolKHR = null, .vkGetMemoryWin32HandleKHR = null, .vkGetMemoryWin32HandlePropertiesKHR = null, .vkGetMemoryFdKHR = null, .vkGetMemoryFdPropertiesKHR = null, .vkGetMemoryZirconHandleFUCHSIA = null, .vkGetMemoryZirconHandlePropertiesFUCHSIA = null, .vkGetMemoryRemoteAddressNV = null, .vkGetMemorySciBufNV = null, .vkGetSemaphoreWin32HandleKHR = null, .vkImportSemaphoreWin32HandleKHR = null, .vkGetSemaphoreFdKHR = null, .vkImportSemaphoreFdKHR = null, .vkGetSemaphoreZirconHandleFUCHSIA = null, .vkImportSemaphoreZirconHandleFUCHSIA = null, .vkGetFenceWin32HandleKHR = null, .vkImportFenceWin32HandleKHR = null, .vkGetFenceFdKHR = null, .vkImportFenceFdKHR = null, .vkGetFenceSciSyncFenceNV = null, .vkGetFenceSciSyncObjNV = null, .vkImportFenceSciSyncFenceNV = null, .vkImportFenceSciSyncObjNV = null, .vkGetSemaphoreSciSyncObjNV = null, .vkImportSemaphoreSciSyncObjNV = null, .vkCreateSemaphoreSciSyncPoolNV = null, .vkDestroySemaphoreSciSyncPoolNV = null, .vkDisplayPowerControlEXT = null, .vkRegisterDeviceEventEXT = null, .vkRegisterDisplayEventEXT = null, .vkGetSwapchainCounterEXT = null, .vkGetDeviceGroupPeerMemoryFeatures = fn (vk.Device, u32, u32, u32, *vk.PeerMemoryFeatureFlags) callconv(.c) void@7ffbe1b83680, .vkGetDeviceGroupPeerMemoryFeaturesKHR = null, .vkBindBufferMemory2 = fn (vk.Device, u32, [*]const vk.BindBufferMemoryInfo) callconv(.c) vk.Result@7ffbe1b83160, .vkBindBufferMemory2KHR = null, .vkBindImageMemory2 = fn (vk.Device, u32, [*]const vk.BindImageMemoryInfo) callconv(.c) vk.Result@7ffbe1b833f0, .vkBindImageMemory2KHR = null, .vkCmdSetDeviceMask = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b83930, .vkCmdSetDeviceMaskKHR = null, .vkGetDeviceGroupPresentCapabilitiesKHR = fn (vk.Device, *vk.DeviceGroupPresentCapabilitiesKHR) callconv(.c) vk.Result@7ffbe1b94700, .vkGetDeviceGroupSurfacePresentModesKHR = fn (vk.Device, vk.SurfaceKHR, *vk.DeviceGroupPresentModeFlagsKHR) callconv(.c) vk.Result@7ffbe1b94970, .vkAcquireNextImage2KHR = fn (vk.Device, *const vk.AcquireNextImageInfoKHR, *u32) callconv(.c) vk.Result@7ffbe1b94e90, .vkCmdDispatchBase = fn (vk.CommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.c) void@7ffbe1b83b90, .vkCmdDispatchBaseKHR = null, .vkCreateDescriptorUpdateTemplate = fn (vk.Device, *const vk.DescriptorUpdateTemplateCreateInfo, ?*const vk.AllocationCallbacks, *vk.DescriptorUpdateTemplate) callconv(.c) vk.Result@7ffbe1b86250, .vkCreateDescriptorUpdateTemplateKHR = null, .vkDestroyDescriptorUpdateTemplate = fn (vk.Device, vk.DescriptorUpdateTemplate, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b864f0, .vkDestroyDescriptorUpdateTemplateKHR = null, .vkUpdateDescriptorSetWithTemplate = fn (vk.Device, vk.DescriptorSet, vk.DescriptorUpdateTemplate, *const anyopaque) callconv(.c) void@7ffbe1b867e0, .vkUpdateDescriptorSetWithTemplateKHR = null, .vkCmdPushDescriptorSetWithTemplateKHR = null, .vkSetHdrMetadataEXT = null, .vkGetSwapchainStatusKHR = null, .vkGetRefreshCycleDurationGOOGLE = null, .vkGetPastPresentationTimingGOOGLE = null, .vkCmdSetViewportWScalingNV = null, .vkCmdSetDiscardRectangleEXT = null, .vkCmdSetDiscardRectangleEnableEXT = null, .vkCmdSetDiscardRectangleModeEXT = null, .vkCmdSetSampleLocationsEXT = null, .vkGetBufferMemoryRequirements2 = fn (vk.Device, *const vk.BufferMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b84360, .vkGetBufferMemoryRequirements2KHR = null, .vkGetImageMemoryRequirements2 = fn (vk.Device, *const vk.ImageMemoryRequirementsInfo2, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b840e0, .vkGetImageMemoryRequirements2KHR = null, .vkGetImageSparseMemoryRequirements2 = fn (vk.Device, *const vk.ImageSparseMemoryRequirementsInfo2, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b845e0, .vkGetImageSparseMemoryRequirements2KHR = null, .vkGetDeviceBufferMemoryRequirements = fn (vk.Device, *const vk.DeviceBufferMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f2c0, .vkGetDeviceBufferMemoryRequirementsKHR = null, .vkGetDeviceImageMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *vk.MemoryRequirements2) callconv(.c) void@7ffbe1b8f540, .vkGetDeviceImageMemoryRequirementsKHR = null, .vkGetDeviceImageSparseMemoryRequirements = fn (vk.Device, *const vk.DeviceImageMemoryRequirements, *u32, ?[*]vk.SparseImageMemoryRequirements2) callconv(.c) void@7ffbe1b8f7c0, .vkGetDeviceImageSparseMemoryRequirementsKHR = null, .vkCreateSamplerYcbcrConversion = fn (vk.Device, *const vk.SamplerYcbcrConversionCreateInfo, ?*const vk.AllocationCallbacks, *vk.SamplerYcbcrConversion) callconv(.c) vk.Result@7ffbe1b85ce0, .vkCreateSamplerYcbcrConversionKHR = null, .vkDestroySamplerYcbcrConversion = fn (vk.Device, vk.SamplerYcbcrConversion, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b85fa0, .vkDestroySamplerYcbcrConversionKHR = null, .vkGetDeviceQueue2 = fn (vk.Device, *const vk.DeviceQueueInfo2, *vk.Queue) callconv(.c) void@7ffc22e9feb0, .vkCreateValidationCacheEXT = null, .vkDestroyValidationCacheEXT = null, .vkGetValidationCacheDataEXT = null, .vkMergeValidationCachesEXT = null, .vkGetDescriptorSetLayoutSupport = fn (vk.Device, *const vk.DescriptorSetLayoutCreateInfo, *vk.DescriptorSetLayoutSupport) callconv(.c) void@7ffbe1b87150, .vkGetDescriptorSetLayoutSupportKHR = null, .vkGetSwapchainGrallocUsageANDROID = null, .vkGetSwapchainGrallocUsage2ANDROID = null, .vkAcquireImageANDROID = null, .vkQueueSignalReleaseImageANDROID = null, .vkGetShaderInfoAMD = null, .vkSetLocalDimmingAMD = null, .vkGetCalibratedTimestampsEXT = null, .vkSetDebugUtilsObjectNameEXT = null, .vkSetDebugUtilsObjectTagEXT = null, .vkQueueBeginDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4970, .vkQueueEndDebugUtilsLabelEXT = fn (vk.Queue) callconv(.c) void@7ffbe1bb4d00, .vkQueueInsertDebugUtilsLabelEXT = fn (vk.Queue, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb4fd0, .vkCmdBeginDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5340, .vkCmdEndDebugUtilsLabelEXT = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1bb55a0, .vkCmdInsertDebugUtilsLabelEXT = fn (vk.CommandBuffer, *const vk.DebugUtilsLabelEXT) callconv(.c) void@7ffbe1bb5800, .vkGetMemoryHostPointerPropertiesEXT = null, .vkCmdWriteBufferMarkerAMD = null, .vkCreateRenderPass2 = fn (vk.Device, *const vk.RenderPassCreateInfo2, ?*const vk.AllocationCallbacks, *vk.RenderPass) callconv(.c) vk.Result@7ffbe1b87bd0, .vkCreateRenderPass2KHR = null, .vkCmdBeginRenderPass2 = fn (vk.CommandBuffer, *const vk.RenderPassBeginInfo, *const vk.SubpassBeginInfo) callconv(.c) void@7ffbe1b87eb0, .vkCmdBeginRenderPass2KHR = null, .vkCmdNextSubpass2 = fn (vk.CommandBuffer, *const vk.SubpassBeginInfo, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b881b0, .vkCmdNextSubpass2KHR = null, .vkCmdEndRenderPass2 = fn (vk.CommandBuffer, *const vk.SubpassEndInfo) callconv(.c) void@7ffbe1b88430, .vkCmdEndRenderPass2KHR = null, .vkGetSemaphoreCounterValue = fn (vk.Device, vk.Semaphore, *u64) callconv(.c) vk.Result@7ffbe1b88940, .vkGetSemaphoreCounterValueKHR = null, .vkWaitSemaphores = fn (vk.Device, *const vk.SemaphoreWaitInfo, u64) callconv(.c) vk.Result@7ffbe1b88cd0, .vkWaitSemaphoresKHR = null, .vkSignalSemaphore = fn (vk.Device, *const vk.SemaphoreSignalInfo) callconv(.c) vk.Result@7ffbe1b89040, .vkSignalSemaphoreKHR = null, .vkGetAndroidHardwareBufferPropertiesANDROID = null, .vkGetMemoryAndroidHardwareBufferANDROID = null, .vkCmdDrawIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b874d0, .vkCmdDrawIndirectCountKHR = null, .vkCmdDrawIndirectCountAMD = null, .vkCmdDrawIndexedIndirectCount = fn (vk.CommandBuffer, vk.Buffer, u64, vk.Buffer, u64, u32, u32) callconv(.c) void@7ffbe1b87850, .vkCmdDrawIndexedIndirectCountKHR = null, .vkCmdDrawIndexedIndirectCountAMD = null, .vkCmdSetCheckpointNV = null, .vkGetQueueCheckpointDataNV = null, .vkCmdBindTransformFeedbackBuffersEXT = null, .vkCmdBeginTransformFeedbackEXT = null, .vkCmdEndTransformFeedbackEXT = null, .vkCmdBeginQueryIndexedEXT = null, .vkCmdEndQueryIndexedEXT = null, .vkCmdDrawIndirectByteCountEXT = null, .vkCmdSetExclusiveScissorNV = null, .vkCmdSetExclusiveScissorEnableNV = null, .vkCmdBindShadingRateImageNV = null, .vkCmdSetViewportShadingRatePaletteNV = null, .vkCmdSetCoarseSampleOrderNV = null, .vkCmdDrawMeshTasksNV = null, .vkCmdDrawMeshTasksIndirectNV = null, .vkCmdDrawMeshTasksIndirectCountNV = null, .vkCmdDrawMeshTasksEXT = null, .vkCmdDrawMeshTasksIndirectEXT = null, .vkCmdDrawMeshTasksIndirectCountEXT = null, .vkCompileDeferredNV = null, .vkCreateAccelerationStructureNV = null, .vkCmdBindInvocationMaskHUAWEI = null, .vkDestroyAccelerationStructureKHR = null, .vkDestroyAccelerationStructureNV = null, .vkGetAccelerationStructureMemoryRequirementsNV = null, .vkBindAccelerationStructureMemoryNV = null, .vkCmdCopyAccelerationStructureNV = null, .vkCmdCopyAccelerationStructureKHR = null, .vkCopyAccelerationStructureKHR = null, .vkCmdCopyAccelerationStructureToMemoryKHR = null, .vkCopyAccelerationStructureToMemoryKHR = null, .vkCmdCopyMemoryToAccelerationStructureKHR = null, .vkCopyMemoryToAccelerationStructureKHR = null, .vkCmdWriteAccelerationStructuresPropertiesKHR = null, .vkCmdWriteAccelerationStructuresPropertiesNV = null, .vkCmdBuildAccelerationStructureNV = null, .vkWriteAccelerationStructuresPropertiesKHR = null, .vkCmdTraceRaysKHR = null, .vkCmdTraceRaysNV = null, .vkGetRayTracingShaderGroupHandlesKHR = null, .vkGetRayTracingShaderGroupHandlesNV = null, .vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = null, .vkGetAccelerationStructureHandleNV = null, .vkCreateRayTracingPipelinesNV = null, .vkCreateRayTracingPipelinesKHR = null, .vkCmdTraceRaysIndirectKHR = null, .vkCmdTraceRaysIndirect2KHR = null, .vkGetDeviceAccelerationStructureCompatibilityKHR = null, .vkGetRayTracingShaderGroupStackSizeKHR = null, .vkCmdSetRayTracingPipelineStackSizeKHR = null, .vkGetImageViewHandleNVX = null, .vkGetImageViewAddressNVX = null, .vkGetDeviceGroupSurfacePresentModes2EXT = null, .vkAcquireFullScreenExclusiveModeEXT = null, .vkReleaseFullScreenExclusiveModeEXT = null, .vkAcquireProfilingLockKHR = null, .vkReleaseProfilingLockKHR = null, .vkGetImageDrmFormatModifierPropertiesEXT = null, .vkGetBufferOpaqueCaptureAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89580, .vkGetBufferOpaqueCaptureAddressKHR = null, .vkGetBufferDeviceAddress = fn (vk.Device, *const vk.BufferDeviceAddressInfo) callconv(.c) u64@7ffbe1b89310, .vkGetBufferDeviceAddressKHR = null, .vkGetBufferDeviceAddressEXT = null, .vkInitializePerformanceApiINTEL = null, .vkUninitializePerformanceApiINTEL = null, .vkCmdSetPerformanceMarkerINTEL = null, .vkCmdSetPerformanceStreamMarkerINTEL = null, .vkCmdSetPerformanceOverrideINTEL = null, .vkAcquirePerformanceConfigurationINTEL = null, .vkReleasePerformanceConfigurationINTEL = null, .vkQueueSetPerformanceConfigurationINTEL = null, .vkGetPerformanceParameterINTEL = null, .vkGetDeviceMemoryOpaqueCaptureAddress = fn (vk.Device, *const vk.DeviceMemoryOpaqueCaptureAddressInfo) callconv(.c) u64@7ffbe1b89840, .vkGetDeviceMemoryOpaqueCaptureAddressKHR = null, .vkGetPipelineExecutablePropertiesKHR = null, .vkGetPipelineExecutableStatisticsKHR = null, .vkGetPipelineExecutableInternalRepresentationsKHR = null, .vkCmdSetLineStippleEXT = null, .vkGetFaultData = null, .vkCreateAccelerationStructureKHR = null, .vkCmdBuildAccelerationStructuresKHR = null, .vkCmdBuildAccelerationStructuresIndirectKHR = null, .vkBuildAccelerationStructuresKHR = null, .vkGetAccelerationStructureDeviceAddressKHR = null, .vkCreateDeferredOperationKHR = null, .vkDestroyDeferredOperationKHR = null, .vkGetDeferredOperationMaxConcurrencyKHR = null, .vkGetDeferredOperationResultKHR = null, .vkDeferredOperationJoinKHR = null, .vkGetPipelineIndirectMemoryRequirementsNV = null, .vkGetPipelineIndirectDeviceAddressNV = null, .vkCmdSetCullMode = fn (vk.CommandBuffer, vk.CullModeFlags) callconv(.c) void@7ffbe1b8cd90, .vkCmdSetCullModeEXT = null, .vkCmdSetFrontFace = fn (vk.CommandBuffer, vk.FrontFace) callconv(.c) void@7ffbe1b8cff0, .vkCmdSetFrontFaceEXT = null, .vkCmdSetPrimitiveTopology = fn (vk.CommandBuffer, vk.PrimitiveTopology) callconv(.c) void@7ffbe1b8d250, .vkCmdSetPrimitiveTopologyEXT = null, .vkCmdSetViewportWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Viewport) callconv(.c) void@7ffbe1b8d4b0, .vkCmdSetViewportWithCountEXT = null, .vkCmdSetScissorWithCount = fn (vk.CommandBuffer, u32, [*]const vk.Rect2D) callconv(.c) void@7ffbe1b8d730, .vkCmdSetScissorWithCountEXT = null, .vkCmdBindIndexBuffer2KHR = null, .vkCmdBindVertexBuffers2 = fn (vk.CommandBuffer, u32, u32, [*]const vk.Buffer, [*]const u64, ?[*]const u64, ?[*]const u64) callconv(.c) void@7ffbe1b8d9b0, .vkCmdBindVertexBuffers2EXT = null, .vkCmdSetDepthTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8dcd0, .vkCmdSetDepthTestEnableEXT = null, .vkCmdSetDepthWriteEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8df30, .vkCmdSetDepthWriteEnableEXT = null, .vkCmdSetDepthCompareOp = fn (vk.CommandBuffer, vk.CompareOp) callconv(.c) void@7ffbe1b8e190, .vkCmdSetDepthCompareOpEXT = null, .vkCmdSetDepthBoundsTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e3f0, .vkCmdSetDepthBoundsTestEnableEXT = null, .vkCmdSetStencilTestEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8e650, .vkCmdSetStencilTestEnableEXT = null, .vkCmdSetStencilOp = fn (vk.CommandBuffer, vk.StencilFaceFlags, vk.StencilOp, vk.StencilOp, vk.StencilOp, vk.CompareOp) callconv(.c) void@7ffbe1b8e8b0, .vkCmdSetStencilOpEXT = null, .vkCmdSetPatchControlPointsEXT = null, .vkCmdSetRasterizerDiscardEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8eba0, .vkCmdSetRasterizerDiscardEnableEXT = null, .vkCmdSetDepthBiasEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8ee00, .vkCmdSetDepthBiasEnableEXT = null, .vkCmdSetLogicOpEXT = null, .vkCmdSetPrimitiveRestartEnable = fn (vk.CommandBuffer, u32) callconv(.c) void@7ffbe1b8f060, .vkCmdSetPrimitiveRestartEnableEXT = null, .vkCmdSetTessellationDomainOriginEXT = null, .vkCmdSetDepthClampEnableEXT = null, .vkCmdSetPolygonModeEXT = null, .vkCmdSetRasterizationSamplesEXT = null, .vkCmdSetSampleMaskEXT = null, .vkCmdSetAlphaToCoverageEnableEXT = null, .vkCmdSetAlphaToOneEnableEXT = null, .vkCmdSetLogicOpEnableEXT = null, .vkCmdSetColorBlendEnableEXT = null, .vkCmdSetColorBlendEquationEXT = null, .vkCmdSetColorWriteMaskEXT = null, .vkCmdSetRasterizationStreamEXT = null, .vkCmdSetConservativeRasterizationModeEXT = null, .vkCmdSetExtraPrimitiveOverestimationSizeEXT = null, .vkCmdSetDepthClipEnableEXT = null, .vkCmdSetSampleLocationsEnableEXT = null, .vkCmdSetColorBlendAdvancedEXT = null, .vkCmdSetProvokingVertexModeEXT = null, .vkCmdSetLineRasterizationModeEXT = null, .vkCmdSetLineStippleEnableEXT = null, .vkCmdSetDepthClipNegativeOneToOneEXT = null, .vkCmdSetViewportWScalingEnableNV = null, .vkCmdSetViewportSwizzleNV = null, .vkCmdSetCoverageToColorEnableNV = null, .vkCmdSetCoverageToColorLocationNV = null, .vkCmdSetCoverageModulationModeNV = null, .vkCmdSetCoverageModulationTableEnableNV = null, .vkCmdSetCoverageModulationTableNV = null, .vkCmdSetShadingRateImageEnableNV = null, .vkCmdSetCoverageReductionModeNV = null, .vkCmdSetRepresentativeFragmentTestEnableNV = null, .vkCreatePrivateDataSlot = fn (vk.Device, *const vk.PrivateDataSlotCreateInfo, ?*const vk.AllocationCallbacks, *vk.PrivateDataSlot) callconv(.c) vk.Result@7ffbe1b89b00, .vkCreatePrivateDataSlotEXT = null, .vkDestroyPrivateDataSlot = fn (vk.Device, vk.PrivateDataSlot, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffbe1b89dc0, .vkDestroyPrivateDataSlotEXT = null, .vkSetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, u64) callconv(.c) vk.Result@7ffbe1b8a070, .vkSetPrivateDataEXT = null, .vkGetPrivateData = fn (vk.Device, vk.ObjectType, u64, vk.PrivateDataSlot, *u64) callconv(.c) void@7ffbe1b8a390, .vkGetPrivateDataEXT = null, .vkCmdCopyBuffer2 = fn (vk.CommandBuffer, *const vk.CopyBufferInfo2) callconv(.c) void@7ffbe1b8b7f0, .vkCmdCopyBuffer2KHR = null, .vkCmdCopyImage2 = fn (vk.CommandBuffer, *const vk.CopyImageInfo2) callconv(.c) void@7ffbe1b8bac0, .vkCmdCopyImage2KHR = null, .vkCmdBlitImage2 = fn (vk.CommandBuffer, *const vk.BlitImageInfo2) callconv(.c) void@7ffbe1b8c330, .vkCmdBlitImage2KHR = null, .vkCmdCopyBufferToImage2 = fn (vk.CommandBuffer, *const vk.CopyBufferToImageInfo2) callconv(.c) void@7ffbe1b8bd90, .vkCmdCopyBufferToImage2KHR = null, .vkCmdCopyImageToBuffer2 = fn (vk.CommandBuffer, *const vk.CopyImageToBufferInfo2) callconv(.c) void@7ffbe1b8c060, .vkCmdCopyImageToBuffer2KHR = null, .vkCmdResolveImage2 = fn (vk.CommandBuffer, *const vk.ResolveImageInfo2) callconv(.c) void@7ffbe1b8c600, .vkCmdResolveImage2KHR = null, .vkCmdRefreshObjectsKHR = null, .vkCmdSetFragmentShadingRateKHR = null, .vkCmdSetFragmentShadingRateEnumNV = null, .vkGetAccelerationStructureBuildSizesKHR = null, .vkCmdSetVertexInputEXT = null, .vkCmdSetColorWriteEnableEXT = null, .vkCmdSetEvent2 = fn (vk.CommandBuffer, vk.Event, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8a6a0, .vkCmdSetEvent2KHR = null, .vkCmdResetEvent2 = fn (vk.CommandBuffer, vk.Event, vk.PipelineStageFlags2) callconv(.c) void@7ffbe1b8aa30, .vkCmdResetEvent2KHR = null, .vkCmdWaitEvents2 = fn (vk.CommandBuffer, u32, [*]const vk.Event, [*]const vk.DependencyInfo) callconv(.c) void@7ffbe1b8acd0, .vkCmdWaitEvents2KHR = null, .vkCmdPipelineBarrier2 = fn (vk.CommandBuffer, *const vk.DependencyInfo) callconv(.c) void@7ffbe1b8af50, .vkCmdPipelineBarrier2KHR = null, .vkQueueSubmit2 = fn (vk.Queue, u32, ?[*]const vk.SubmitInfo2, vk.Fence) callconv(.c) vk.Result@7ffbe1b8b540, .vkQueueSubmit2KHR = null, .vkCmdWriteTimestamp2 = fn (vk.CommandBuffer, vk.PipelineStageFlags2, vk.QueryPool, u32) callconv(.c) void@7ffbe1b8b290, .vkCmdWriteTimestamp2KHR = null, .vkCmdWriteBufferMarker2AMD = null, .vkGetQueueCheckpointData2NV = null, .vkCopyMemoryToImageEXT = null, .vkCopyImageToMemoryEXT = null, .vkCopyImageToImageEXT = null, .vkTransitionImageLayoutEXT = null, .vkGetCommandPoolMemoryConsumption = null, .vkCreateVideoSessionKHR = null, .vkDestroyVideoSessionKHR = null, .vkCreateVideoSessionParametersKHR = null, .vkUpdateVideoSessionParametersKHR = null, .vkGetEncodedVideoSessionParametersKHR = null, .vkDestroyVideoSessionParametersKHR = null, .vkGetVideoSessionMemoryRequirementsKHR = null, .vkBindVideoSessionMemoryKHR = null, .vkCmdDecodeVideoKHR = null, .vkCmdBeginVideoCodingKHR = null, .vkCmdControlVideoCodingKHR = null, .vkCmdEndVideoCodingKHR = null, .vkCmdEncodeVideoKHR = null, .vkCmdDecompressMemoryNV = null, .vkCmdDecompressMemoryIndirectCountNV = null, .vkCreateCuModuleNVX = null, .vkCreateCuFunctionNVX = null, .vkDestroyCuModuleNVX = null, .vkDestroyCuFunctionNVX = null, .vkCmdCuLaunchKernelNVX = null, .vkGetDescriptorSetLayoutSizeEXT = null, .vkGetDescriptorSetLayoutBindingOffsetEXT = null, .vkGetDescriptorEXT = null, .vkCmdBindDescriptorBuffersEXT = null, .vkCmdSetDescriptorBufferOffsetsEXT = null, .vkCmdBindDescriptorBufferEmbeddedSamplersEXT = null, .vkGetBufferOpaqueCaptureDescriptorDataEXT = null, .vkGetImageOpaqueCaptureDescriptorDataEXT = null, .vkGetImageViewOpaqueCaptureDescriptorDataEXT = null, .vkGetSamplerOpaqueCaptureDescriptorDataEXT = null, .vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = null, .vkSetDeviceMemoryPriorityEXT = null, .vkWaitForPresentKHR = null, .vkCreateBufferCollectionFUCHSIA = null, .vkSetBufferCollectionBufferConstraintsFUCHSIA = null, .vkSetBufferCollectionImageConstraintsFUCHSIA = null, .vkDestroyBufferCollectionFUCHSIA = null, .vkGetBufferCollectionPropertiesFUCHSIA = null, .vkCmdBeginRendering = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b8c8d0, .vkCmdBeginRenderingKHR = fn (vk.CommandBuffer, *const vk.RenderingInfo) callconv(.c) void@7ffbe1b98fc0, .vkCmdEndRendering = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b8cb30, .vkCmdEndRenderingKHR = fn (vk.CommandBuffer) callconv(.c) void@7ffbe1b99220, .vkGetDescriptorSetLayoutHostMappingInfoVALVE = null, .vkGetDescriptorSetHostMappingVALVE = null, .vkCreateMicromapEXT = null, .vkCmdBuildMicromapsEXT = null, .vkBuildMicromapsEXT = null, .vkDestroyMicromapEXT = null, .vkCmdCopyMicromapEXT = null, .vkCopyMicromapEXT = null, .vkCmdCopyMicromapToMemoryEXT = null, .vkCopyMicromapToMemoryEXT = null, .vkCmdCopyMemoryToMicromapEXT = null, .vkCopyMemoryToMicromapEXT = null, .vkCmdWriteMicromapsPropertiesEXT = null, .vkWriteMicromapsPropertiesEXT = null, .vkGetDeviceMicromapCompatibilityEXT = null, .vkGetMicromapBuildSizesEXT = null, .vkGetShaderModuleIdentifierEXT = null, .vkGetShaderModuleCreateInfoIdentifierEXT = null, .vkGetImageSubresourceLayout2KHR = null, .vkGetImageSubresourceLayout2EXT = null, .vkGetPipelinePropertiesEXT = null, .vkExportMetalObjectsEXT = null, .vkGetFramebufferTilePropertiesQCOM = null, .vkGetDynamicRenderingTilePropertiesQCOM = null, .vkCreateOpticalFlowSessionNV = null, .vkDestroyOpticalFlowSessionNV = null, .vkBindOpticalFlowSessionImageNV = null, .vkCmdOpticalFlowExecuteNV = null, .vkGetDeviceFaultInfoEXT = null, .vkCmdSetDepthBias2EXT = null, .vkReleaseSwapchainImagesEXT = null, .vkGetDeviceImageSubresourceLayoutKHR = null, .vkMapMemory2KHR = null, .vkUnmapMemory2KHR = null, .vkCreateShadersEXT = null, .vkDestroyShaderEXT = null, .vkGetShaderBinaryDataEXT = null, .vkCmdBindShadersEXT = null, .vkGetScreenBufferPropertiesQNX = null, .vkGetExecutionGraphPipelineScratchSizeAMDX = null, .vkGetExecutionGraphPipelineNodeIndexAMDX = null, .vkCreateExecutionGraphPipelinesAMDX = null, .vkCmdInitializeGraphScratchMemoryAMDX = null, .vkCmdDispatchGraphAMDX = null, .vkCmdDispatchGraphIndirectAMDX = null, .vkCmdDispatchGraphIndirectCountAMDX = null, .vkSetLatencySleepModeNV = null, .vkLatencySleepNV = null, .vkSetLatencyMarkerNV = null, .vkGetLatencyTimingsNV = null, .vkQueueNotifyOutOfBandNV = null }, .instance = vk.InstanceDispatch{ .vkDestroyInstance = fn (vk.Instance, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e91340, .vkEnumeratePhysicalDevices = fn (vk.Instance, *u32, ?[*]vk.PhysicalDevice) callconv(.c) vk.Result@7ffc22e9c710, .vkGetDeviceProcAddr = fn (vk.Device, [*:0]const u8) callconv(.c) ?*const fn () callconv(.c) void@7ffc22e9a140, .vkGetPhysicalDeviceProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties) callconv(.c) void@7ffc22e9b530, .vkGetPhysicalDeviceQueueFamilyProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties) callconv(.c) void@7ffc22e9cf80, .vkGetPhysicalDeviceMemoryProperties = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties) callconv(.c) void@7ffc22e96ef0, .vkGetPhysicalDeviceFeatures = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures) callconv(.c) void@7ffc22e9ee50, .vkGetPhysicalDeviceFormatProperties = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties) callconv(.c) void@7ffc22e9ec90, .vkGetPhysicalDeviceImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.ImageTiling, vk.ImageUsageFlags, vk.ImageCreateFlags, *vk.ImageFormatProperties) callconv(.c) vk.Result@7ffc22e9c520, .vkCreateDevice = fn (vk.PhysicalDevice, *const vk.DeviceCreateInfo, ?*const vk.AllocationCallbacks, *vk.Device) callconv(.c) vk.Result@7ffc22e9eaa0, .vkEnumerateDeviceLayerProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.LayerProperties) callconv(.c) vk.Result@7ffc22e9c9c0, .vkEnumerateDeviceExtensionProperties = fn (vk.PhysicalDevice, ?[*:0]const u8, *u32, ?[*]vk.ExtensionProperties) callconv(.c) vk.Result@7ffc22e9e0d0, .vkGetPhysicalDeviceSparseImageFormatProperties = fn (vk.PhysicalDevice, vk.Format, vk.ImageType, vk.SampleCountFlags, vk.ImageUsageFlags, vk.ImageTiling, *u32, ?[*]vk.SparseImageFormatProperties) callconv(.c) void@7ffc22e982d0, .vkCreateAndroidSurfaceKHR = null, .vkGetPhysicalDeviceDisplayPropertiesKHR = null, .vkGetPhysicalDeviceDisplayPlanePropertiesKHR = null, .vkGetDisplayPlaneSupportedDisplaysKHR = null, .vkGetDisplayModePropertiesKHR = null, .vkCreateDisplayModeKHR = null, .vkGetDisplayPlaneCapabilitiesKHR = null, .vkCreateDisplayPlaneSurfaceKHR = null, .vkDestroySurfaceKHR = fn (vk.Instance, vk.SurfaceKHR, ?*const vk.AllocationCallbacks) callconv(.c) void@7ffc22e94850, .vkGetPhysicalDeviceSurfaceSupportKHR = fn (vk.PhysicalDevice, u32, vk.SurfaceKHR, *u32) callconv(.c) vk.Result@7ffc22e97ba0, .vkGetPhysicalDeviceSurfaceCapabilitiesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *vk.SurfaceCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9eb60, .vkGetPhysicalDeviceSurfaceFormatsKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.SurfaceFormatKHR) callconv(.c) vk.Result@7ffc22e9cf10, .vkGetPhysicalDeviceSurfacePresentModesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e96d60, .vkCreateViSurfaceNN = null, .vkCreateWaylandSurfaceKHR = null, .vkGetPhysicalDeviceWaylandPresentationSupportKHR = null, .vkCreateWin32SurfaceKHR = fn (vk.Instance, *const vk.Win32SurfaceCreateInfoKHR, ?*const vk.AllocationCallbacks, *vk.SurfaceKHR) callconv(.c) vk.Result@7ffc22e98cf0, .vkGetPhysicalDeviceWin32PresentationSupportKHR = fn (vk.PhysicalDevice, u32) callconv(.c) u32@7ffc22e9a7e0, .vkCreateXlibSurfaceKHR = null, .vkGetPhysicalDeviceXlibPresentationSupportKHR = null, .vkCreateXcbSurfaceKHR = null, .vkGetPhysicalDeviceXcbPresentationSupportKHR = null, .vkCreateDirectFBSurfaceEXT = null, .vkGetPhysicalDeviceDirectFBPresentationSupportEXT = null, .vkCreateImagePipeSurfaceFUCHSIA = null, .vkCreateStreamDescriptorSurfaceGGP = null, .vkCreateScreenSurfaceQNX = null, .vkGetPhysicalDeviceScreenPresentationSupportQNX = null, .vkCreateDebugReportCallbackEXT = null, .vkDestroyDebugReportCallbackEXT = null, .vkDebugReportMessageEXT = null, .vkGetPhysicalDeviceExternalImageFormatPropertiesNV = null, .vkGetPhysicalDeviceFeatures2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceFeatures2) callconv(.c) void@7ffc22e93a60, .vkGetPhysicalDeviceFeatures2KHR = null, .vkGetPhysicalDeviceProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceProperties2) callconv(.c) void@7ffc22e9e6b0, .vkGetPhysicalDeviceProperties2KHR = null, .vkGetPhysicalDeviceFormatProperties2 = fn (vk.PhysicalDevice, vk.Format, *vk.FormatProperties2) callconv(.c) void@7ffc22e97770, .vkGetPhysicalDeviceFormatProperties2KHR = null, .vkGetPhysicalDeviceImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceImageFormatInfo2, *vk.ImageFormatProperties2) callconv(.c) vk.Result@7ffc22e9aba0, .vkGetPhysicalDeviceImageFormatProperties2KHR = null, .vkGetPhysicalDeviceQueueFamilyProperties2 = fn (vk.PhysicalDevice, *u32, ?[*]vk.QueueFamilyProperties2) callconv(.c) void@7ffc22e974d0, .vkGetPhysicalDeviceQueueFamilyProperties2KHR = null, .vkGetPhysicalDeviceMemoryProperties2 = fn (vk.PhysicalDevice, *vk.PhysicalDeviceMemoryProperties2) callconv(.c) void@7ffc22e97020, .vkGetPhysicalDeviceMemoryProperties2KHR = null, .vkGetPhysicalDeviceSparseImageFormatProperties2 = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSparseImageFormatInfo2, *u32, ?[*]vk.SparseImageFormatProperties2) callconv(.c) void@7ffc22e9d3d0, .vkGetPhysicalDeviceSparseImageFormatProperties2KHR = null, .vkGetPhysicalDeviceExternalBufferProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalBufferInfo, *vk.ExternalBufferProperties) callconv(.c) void@7ffc22e985c0, .vkGetPhysicalDeviceExternalBufferPropertiesKHR = null, .vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = null, .vkGetPhysicalDeviceSciBufAttributesNV = null, .vkGetPhysicalDeviceExternalSemaphoreProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalSemaphoreInfo, *vk.ExternalSemaphoreProperties) callconv(.c) void@7ffc22e94e30, .vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = null, .vkGetPhysicalDeviceExternalFenceProperties = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceExternalFenceInfo, *vk.ExternalFenceProperties) callconv(.c) void@7ffc22e914d0, .vkGetPhysicalDeviceExternalFencePropertiesKHR = null, .vkGetPhysicalDeviceSciSyncAttributesNV = null, .vkReleaseDisplayEXT = null, .vkAcquireXlibDisplayEXT = null, .vkGetRandROutputDisplayEXT = null, .vkAcquireWinrtDisplayNV = fn (vk.PhysicalDevice, vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97df0, .vkGetWinrtDisplayNV = fn (vk.PhysicalDevice, u32, *vk.DisplayKHR) callconv(.c) vk.Result@7ffc22e97bb0, .vkGetPhysicalDeviceSurfaceCapabilities2EXT = null, .vkEnumeratePhysicalDeviceGroups = fn (vk.Instance, *u32, ?[*]vk.PhysicalDeviceGroupProperties) callconv(.c) vk.Result@7ffc22e95ce0, .vkEnumeratePhysicalDeviceGroupsKHR = null, .vkGetPhysicalDevicePresentRectanglesKHR = fn (vk.PhysicalDevice, vk.SurfaceKHR, *u32, ?[*]vk.Rect2D) callconv(.c) vk.Result@7ffc22e989d0, .vkCreateIOSSurfaceMVK = null, .vkCreateMacOSSurfaceMVK = null, .vkCreateMetalSurfaceEXT = null, .vkGetPhysicalDeviceMultisamplePropertiesEXT = fn (vk.PhysicalDevice, vk.SampleCountFlags, *vk.MultisamplePropertiesEXT) callconv(.c) void@7ffc22e98650, .vkGetPhysicalDeviceSurfaceCapabilities2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *vk.SurfaceCapabilities2KHR) callconv(.c) vk.Result@7ffc22e9af20, .vkGetPhysicalDeviceSurfaceFormats2KHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.SurfaceFormat2KHR) callconv(.c) vk.Result@7ffc22e9c950, .vkGetPhysicalDeviceDisplayProperties2KHR = null, .vkGetPhysicalDeviceDisplayPlaneProperties2KHR = null, .vkGetDisplayModeProperties2KHR = null, .vkGetDisplayPlaneCapabilities2KHR = null, .vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.TimeDomainEXT) callconv(.c) vk.Result@7ffc22e93560, .vkCreateDebugUtilsMessengerEXT = null, .vkDestroyDebugUtilsMessengerEXT = null, .vkSubmitDebugUtilsMessageEXT = null, .vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesNV) callconv(.c) vk.Result@7ffc22e9e2d0, .vkGetPhysicalDeviceSurfacePresentModes2EXT = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceSurfaceInfo2KHR, *u32, ?[*]vk.PresentModeKHR) callconv(.c) vk.Result@7ffc22e9a6e0, .vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = fn (vk.PhysicalDevice, u32, *u32, ?[*]vk.PerformanceCounterKHR, ?[*]vk.PerformanceCounterDescriptionKHR) callconv(.c) vk.Result@7ffc22e93ec0, .vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = fn (vk.PhysicalDevice, *const vk.QueryPoolPerformanceCreateInfoKHR, *u32) callconv(.c) void@7ffc22e94550, .vkCreateHeadlessSurfaceEXT = null, .vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = fn (vk.PhysicalDevice, *u32, ?[*]vk.FramebufferMixedSamplesCombinationNV) callconv(.c) vk.Result@7ffc22e9cbd0, .vkGetPhysicalDeviceToolProperties = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e97100, .vkGetPhysicalDeviceToolPropertiesEXT = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceToolProperties) callconv(.c) vk.Result@7ffc22e973d0, .vkGetPhysicalDeviceRefreshableObjectTypesKHR = null, .vkGetPhysicalDeviceFragmentShadingRatesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.PhysicalDeviceFragmentShadingRateKHR) callconv(.c) vk.Result@7ffc22e9dae0, .vkGetPhysicalDeviceVideoCapabilitiesKHR = fn (vk.PhysicalDevice, *const vk.VideoProfileInfoKHR, *vk.VideoCapabilitiesKHR) callconv(.c) vk.Result@7ffc22e9a430, .vkGetPhysicalDeviceVideoFormatPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoFormatInfoKHR, *u32, ?[*]vk.VideoFormatPropertiesKHR) callconv(.c) vk.Result@7ffc22e934e0, .vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = fn (vk.PhysicalDevice, *const vk.PhysicalDeviceVideoEncodeQualityLevelInfoKHR, *vk.VideoEncodeQualityLevelPropertiesKHR) callconv(.c) vk.Result@7ffc22e93050, .vkAcquireDrmDisplayEXT = null, .vkGetDrmDisplayEXT = null, .vkGetPhysicalDeviceOpticalFlowImageFormatsNV = fn (vk.PhysicalDevice, *const vk.OpticalFlowImageFormatInfoNV, *u32, ?[*]vk.OpticalFlowImageFormatPropertiesNV) callconv(.c) vk.Result@7ffc22e9a560, .vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = fn (vk.PhysicalDevice, *u32, ?[*]vk.CooperativeMatrixPropertiesKHR) callconv(.c) vk.Result@7ffc22e9c8f0 }, .command_pool = vk.CommandPool(2870497205658058777), .queue = vk.Queue(1562649710112), .stage_buffers = array_list.ArrayListAligned(gfx.vk.vertex_pool.StageBuffer,null){ .items = { gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... }, gfx.vk.vertex_pool.StageBuffer{ ... } }, .capacity = 135, .allocator = mem.Allocator{ .ptr = anyopaque@0, .vtable = mem.Allocator.VTable{ ... } } }, .free_buffers = array_list.ArrayListAligned(u32,null){ .items = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, error: process didn't exit successfully: `target\debug\biolab.exe` (exit code: 0xc000013a, STATUS_CONTROL_C_EXIT)
