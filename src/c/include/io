#pragma once

#include <def>

typedef struct Context;
typedef struct CpuResource;

typedef enum {
    IO_OPERATION_ACCEPT,
    IO_OPERATION_CONNECT,
    IO_OPERATION_READ,
    IO_OPERATION_WRITE,
    IO_OPERATION_CLOSE
} IoOperationType;

typedef struct {
    u64 id;
    i32 result;
    IoOperationType type;
    void* user_data;
    void* handle;
} IoComplete;

typedef enum {
    IO_SEEK_BEGIN,
    IO_SEEK_CURRENT,
    IO_SEEK_END
} IoSeekOrigin;

typedef enum {
    IO_MODE_READ = 1,
    IO_MODE_WRITE = 2,
    IO_MODE_APPEND = 4,
    IO_MODE_CREATE = 8,
    IO_MODE_TRUNCATE = 16,
    IO_MODE_NONBLOCK = 32
} IoModeFlags;

typedef struct {
    bool is_ipv6;
    union {
        struct {
            u8 addr[4];
            u16 port;
        } ipv4;
        struct {
            u8 addr[16];
            u16 port;
        } ipv6;
    };
} IpAddress;

enum CpuError {

};

struct CpuBuffer {
    u8* data;
    u64 capacity;
    u64 size;
    bool owned;
};

Context* init(u32 max_concurrency);
void shutdown(Context* ctx);

CpuResource* cpu_socket_create(Context* context, bool ipv6);
bool cpu_socket_bind(CpuResource* socket, const IpAddress* address);
bool cpu_socket_listen(CpuResource* socket, i32 backlog);
u64 cpu_socket_accept(CpuResource* socket, void* user_data);
u64 cpu_socket_connect(CpuResource* socket, const IpAddress* address, void* user_data);
u64 cpu_socket_read(CpuResource* socket, CpuBuffer* buffer, void* user_data);
u64 cpu_socket_write(CpuResource* socket, CpuBuffer* buffer, void* user_data);
u64 cpu_socket_close(CpuResource* socket, void* user_data);

CpuResource* cpu_file_create(Context* context);
u64 cpu_file_open(CpuResource* file, const char* path, IoModeFlags mode, void* user_data);
u64 cpu_file_read(CpuResource* file, CpuBuffer* buffer, i64 offset, void* user_data);
u64 cpu_file_write(CpuResource* file, CpuBuffer* buffer, i64 offset, void* user_data);
u64 cpu_file_seek(CpuResource* file, i64 offset, IoSeekOrigin origin, void* user_data);
u64 cpu_file_flush(CpuResource* file, void* user_data);
u64 cpu_file_close(CpuResource* file, void* user_data);
bool cpu_file_size(CpuResource* file, u64* size);

CpuResource* cpu_release(CpuResource* resource);

CpuBuffer* cpu_buffer_create(u64 capacity);
CpuBuffer* cpu_buffer_wrap(u8* data, u32 size);
void cpu_buffer_release(CpuBuffer* buffer);

void cpu_resource_release(CpuResource* resource);

bool cpu_socket_set_option(CpuResource* socket, i32 option, const void* value, u32 len);

i32 cpu_submit(Context* context);
i32 cpu_poll(Context* context, IoComplete* completions, u32 max_completions, i32 timeout_ms);

const char* last_error();